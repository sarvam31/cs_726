[
    {
        "db_id":"concert_singer",
        "question":"How many singers do we have?",
        "SQL":"SELECT count(*) FROM singer",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"singer"
        }
        
    },
    {
        "db_id":"concert_singer",
        "question":"What is the total number of singers?",
        "SQL":"SELECT count(*) FROM singer",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"singer"
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "SQL":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"country"
                },
                {
                    "value":"age"
                }
            ],
            "from":"singer",
            "orderby":{
                "value":"age",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names, countries, and ages for every singer in descending order of age?",
        "SQL":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"country"
                },
                {
                    "value":"age"
                }
            ],
            "from":"singer",
            "orderby":{
                "value":"age",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the average, minimum, and maximum age of all singers from France?",
        "SQL":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"age"
                    }
                },
                {
                    "value":{
                        "min":"age"
                    }
                },
                {
                    "value":{
                        "max":"age"
                    }
                }
            ],
            "from":"singer",
            "where":{
                "eq":[
                    "country",
                    {
                        "literal":"France"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the average, minimum, and maximum age for all French singers?",
        "SQL":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"age"
                    }
                },
                {
                    "value":{
                        "min":"age"
                    }
                },
                {
                    "value":{
                        "max":"age"
                    }
                }
            ],
            "from":"singer",
            "where":{
                "eq":[
                    "country",
                    {
                        "literal":"France"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show the name and the release year of the song by the youngest singer.",
        "SQL":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"song_name"
                },
                {
                    "value":"song_release_year"
                }
            ],
            "from":"singer",
            "orderby":{
                "value":"age"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names and release years for all the songs of the youngest singer?",
        "SQL":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"song_name"
                },
                {
                    "value":"song_release_year"
                }
            ],
            "from":"singer",
            "orderby":{
                "value":"age"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are all distinct countries where singers above age 20 are from?",
        "SQL":"SELECT DISTINCT country FROM singer WHERE age  >  20",
        "SQL_parse":{
            "select_distinct":{
                "value":"country"
            },
            "from":"singer",
            "where":{
                "gt":[
                    "age",
                    20
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are  the different countries with singers above age 20?",
        "SQL":"SELECT DISTINCT country FROM singer WHERE age  >  20",
        "SQL_parse":{
            "select_distinct":{
                "value":"country"
            },
            "from":"singer",
            "where":{
                "gt":[
                    "age",
                    20
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show all countries and the number of singers in each country.",
        "SQL":"SELECT country ,  count(*) FROM singer GROUP BY country",
        "SQL_parse":{
            "select":[
                {
                    "value":"country"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"country"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"How many singers are from each country?",
        "SQL":"SELECT country ,  count(*) FROM singer GROUP BY country",
        "SQL_parse":{
            "select":[
                {
                    "value":"country"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"country"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"List all song names by singers above the average age.",
        "SQL":"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "SQL_parse":{
            "select":{
                "value":"song_name"
            },
            "from":"singer",
            "where":{
                "gt":[
                    "age",
                    {
                        "select":{
                            "value":{
                                "avg":"age"
                            }
                        },
                        "from":"singer"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are all the song names by singers who are older than average?",
        "SQL":"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "SQL_parse":{
            "select":{
                "value":"song_name"
            },
            "from":"singer",
            "where":{
                "gt":[
                    "age",
                    {
                        "select":{
                            "value":{
                                "avg":"age"
                            }
                        },
                        "from":"singer"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "SQL":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "SQL_parse":{
            "select":[
                {
                    "value":"LOCATION"
                },
                {
                    "value":"name"
                }
            ],
            "from":"stadium",
            "where":{
                "between":[
                    "capacity",
                    5000,
                    10000
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the locations and names of all stations with capacity between 5000 and 10000?",
        "SQL":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "SQL_parse":{
            "select":[
                {
                    "value":"LOCATION"
                },
                {
                    "value":"name"
                }
            ],
            "from":"stadium",
            "where":{
                "between":[
                    "capacity",
                    5000,
                    10000
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the maximum capacity and the average of all stadiums ?",
        "SQL":"select max(capacity), average from stadium",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"capacity"
                    }
                },
                {
                    "value":"average"
                }
            ],
            "from":"stadium"
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the average and maximum capacities for all stadiums ?",
        "SQL":"select avg(capacity) ,  max(capacity) from stadium",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"capacity"
                    }
                },
                {
                    "value":{
                        "max":"capacity"
                    }
                }
            ],
            "from":"stadium"
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the name and capacity for the stadium with highest average attendance?",
        "SQL":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"capacity"
                }
            ],
            "from":"stadium",
            "orderby":{
                "value":"average",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the name and capacity for the stadium with the highest average attendance?",
        "SQL":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"capacity"
                }
            ],
            "from":"stadium",
            "orderby":{
                "value":"average",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"How many concerts are there in year 2014 or 2015?",
        "SQL":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"concert",
            "where":{
                "or":[
                    {
                        "eq":[
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq":[
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"How many concerts occurred in 2014 or 2015?",
        "SQL":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"concert",
            "where":{
                "or":[
                    {
                        "eq":[
                            "YEAR",
                            2014
                        ]
                    },
                    {
                        "eq":[
                            "YEAR",
                            2015
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show the stadium name and the number of concerts in each stadium.",
        "SQL":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"stadium",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.stadium_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"For each stadium, how many concerts play there?",
        "SQL":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"stadium",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.stadium_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "SQL":"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":"T2.capacity"
                }
            ],
            "from":[
                {
                    "value":"concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"stadium",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stadium_id",
                            "T2.stadium_id"
                        ]
                    }
                }
            ],
            "where":{
                "gte":[
                    "T1.year",
                    2014
                ]
            },
            "groupby":{
                "value":"T2.stadium_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "SQL":"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.name"
                },
                {
                    "value":"t2.capacity"
                }
            ],
            "from":[
                {
                    "value":"concert",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"stadium",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.stadium_id",
                            "t2.stadium_id"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "t1.year",
                    2013
                ]
            },
            "groupby":{
                "value":"t2.stadium_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Which year has most number of concerts?",
        "SQL":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"YEAR"
            },
            "from":"concert",
            "groupby":{
                "value":"YEAR"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the year that had the most concerts?",
        "SQL":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"YEAR"
            },
            "from":"concert",
            "groupby":{
                "value":"YEAR"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show the stadium names without any concert.",
        "SQL":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"stadium",
            "where":{
                "nin":[
                    "stadium_id",
                    {
                        "select":{
                            "value":"stadium_id"
                        },
                        "from":"concert"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names of the stadiums without any concerts?",
        "SQL":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"stadium",
            "where":{
                "nin":[
                    "stadium_id",
                    {
                        "select":{
                            "value":"stadium_id"
                        },
                        "from":"concert"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show countries where a singer above age 40 and a singer below 30 are from.",
        "SQL":"SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"country"
                    },
                    "from":"singer",
                    "where":{
                        "gt":[
                            "age",
                            40
                        ]
                    }
                },
                {
                    "select":{
                        "value":"country"
                    },
                    "from":"singer",
                    "where":{
                        "lt":[
                            "age",
                            30
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show names for all stadiums except for stadiums having a concert in year 2014.",
        "SQL":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"stadium"
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.year",
                            2014
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names of all stadiums that did not have a concert in 2014?",
        "SQL":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"stadium"
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.year",
                            2014
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Show the name and theme for all concerts and the number of singers in each concert.",
        "SQL":"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.concert_name"
                },
                {
                    "value":"T2.theme"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"concert",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.concert_id",
                            "T2.concert_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.concert_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names , themes , and number of singers for every concert ?",
        "SQL":"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.concert_name"
                },
                {
                    "value":"t2.theme"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"concert",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.concert_id",
                            "t2.concert_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.concert_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"List singer names and number of concerts for each singer.",
        "SQL":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"singer",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.singer_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names of the singers and number of concerts for each person?",
        "SQL":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"singer",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.singer_id"
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"List all singer names in concerts in year 2014.",
        "SQL":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"singer",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"concert",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.year",
                    2014
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names of the singers who performed in a concert in 2014?",
        "SQL":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"singer_in_concert",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"singer",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.singer_id",
                            "T2.singer_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"concert",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.concert_id",
                            "T3.concert_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.year",
                    2014
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "SQL":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"country"
                }
            ],
            "from":"singer",
            "where":{
                "like":[
                    "song_name",
                    {
                        "literal":"%Hey%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "SQL":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"country"
                }
            ],
            "from":"singer",
            "where":{
                "like":[
                    "song_name",
                    {
                        "literal":"%Hey%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "SQL":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T2.name"
                        },
                        {
                            "value":"T2.location"
                        }
                    ],
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.Year",
                            2014
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T2.name"
                        },
                        {
                            "value":"T2.location"
                        }
                    ],
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.Year",
                            2015
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "SQL":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T2.name"
                        },
                        {
                            "value":"T2.location"
                        }
                    ],
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.Year",
                            2014
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T2.name"
                        },
                        {
                            "value":"T2.location"
                        }
                    ],
                    "from":[
                        {
                            "value":"concert",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"stadium",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stadium_id",
                                    "T2.stadium_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.Year",
                            2015
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"concert_singer",
        "question":"Find the number of concerts happened in the stadium with the highest capacity .",
        "SQL":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"concert",
            "where":{
                "eq":[
                    "stadium_id",
                    {
                        "select":{
                            "value":"stadium_id"
                        },
                        "from":"stadium",
                        "orderby":{
                            "value":"capacity",
                            "sort":"desc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"concert_singer",
        "question":"What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "SQL":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"concert",
            "where":{
                "eq":[
                    "stadium_id",
                    {
                        "select":{
                            "value":"stadium_id"
                        },
                        "from":"stadium",
                        "orderby":{
                            "value":"capacity",
                            "sort":"desc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the number of pets whose weight is heavier than 10.",
        "SQL":"SELECT count(*) FROM pets WHERE weight  >  10",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"pets",
            "where":{
                "gt":[
                    "weight",
                    10
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"How many pets have a greater weight than 10?",
        "SQL":"SELECT count(*) FROM pets WHERE weight  >  10",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"pets",
            "where":{
                "gt":[
                    "weight",
                    10
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the weight of the youngest dog.",
        "SQL":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"weight"
            },
            "from":"pets",
            "orderby":{
                "value":"pet_age"
            },
            "limit":1
        }
    },
    {
        "db_id":"pets_1",
        "question":"How much does the youngest dog weigh?",
        "SQL":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"weight"
            },
            "from":"pets",
            "orderby":{
                "value":"pet_age"
            },
            "limit":1
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "SQL":"SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"weight"
                    }
                },
                {
                    "value":"petType"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"petType"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"List the maximum weight and type for each type of pet.",
        "SQL":"SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"weight"
                    }
                },
                {
                    "value":"petType"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"petType"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find number of pets owned by students who are older than 20.",
        "SQL":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T1.age",
                    20
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"How many pets are owned by students that have an age greater than 20?",
        "SQL":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T1.age",
                    20
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the number of dog pets that are raised by female students (with sex F).",
        "SQL":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.petid",
                            "T3.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.sex",
                            {
                                "literal":"F"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"How many dog pets are raised by female students?",
        "SQL":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.petid",
                            "T3.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.sex",
                            {
                                "literal":"F"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the number of distinct type of pets.",
        "SQL":"SELECT count(DISTINCT pettype) FROM pets",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"pettype"
                }
            },
            "from":"pets"
        }
    },
    {
        "db_id":"pets_1",
        "question":"How many different types of pet are there?",
        "SQL":"SELECT count(DISTINCT pettype) FROM pets",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"pettype"
                }
            },
            "from":"pets"
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the first name of students who have cat or dog pet.",
        "SQL":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Fname"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What are the first names of every student who has a cat or dog as a pet?",
        "SQL":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Fname"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the first name of students who have both cat and dog pets .",
        "SQL":"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"t1.fname"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.stuid",
                                    "t2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t3.petid",
                                    "t2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "t3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"t1.fname"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.stuid",
                                    "t2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t3.petid",
                                    "t2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "t3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"What are the students' first names who have both cats and dogs as pets?",
        "SQL":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Fname"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stuid",
                                    "T2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T3.petid",
                                    "T2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Fname"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stuid",
                                    "T2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T3.petid",
                                    "T2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the major and age of students who do not have a cat pet.",
        "SQL":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "SQL_parse":{
            "select":[
                {
                    "value":"major"
                },
                {
                    "value":"age"
                }
            ],
            "from":"student",
            "where":{
                "nin":[
                    "stuid",
                    {
                        "select":{
                            "value":"T1.stuid"
                        },
                        "from":[
                            {
                                "value":"student",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"has_pet",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.stuid",
                                        "T2.stuid"
                                    ]
                                }
                            },
                            {
                                "join":{
                                    "value":"pets",
                                    "name":"T3"
                                },
                                "on":{
                                    "eq":[
                                        "T3.petid",
                                        "T2.petid"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T3.pettype",
                                {
                                    "literal":"cat"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What major is every student who does not own a cat as a pet, and also how old are they?",
        "SQL":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "SQL_parse":{
            "select":[
                {
                    "value":"major"
                },
                {
                    "value":"age"
                }
            ],
            "from":"student",
            "where":{
                "nin":[
                    "stuid",
                    {
                        "select":{
                            "value":"T1.stuid"
                        },
                        "from":[
                            {
                                "value":"student",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"has_pet",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.stuid",
                                        "T2.stuid"
                                    ]
                                }
                            },
                            {
                                "join":{
                                    "value":"pets",
                                    "name":"T3"
                                },
                                "on":{
                                    "eq":[
                                        "T3.petid",
                                        "T2.petid"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T3.pettype",
                                {
                                    "literal":"cat"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the id of students who do not have a cat pet.",
        "SQL":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"stuid"
                    },
                    "from":"student"
                },
                {
                    "select":{
                        "value":"T1.stuid"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stuid",
                                    "T2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T3.petid",
                                    "T2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"What are the ids of the students who do not own cats as pets?",
        "SQL":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"stuid"
                    },
                    "from":"student"
                },
                {
                    "select":{
                        "value":"T1.stuid"
                    },
                    "from":[
                        {
                            "value":"student",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"has_pet",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.stuid",
                                    "T2.stuid"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"pets",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T3.petid",
                                    "T2.petid"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "SQL":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.age"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    },
                    {
                        "nin":[
                            "T1.stuid",
                            {
                                "select":{
                                    "value":"T1.stuid"
                                },
                                "from":[
                                    {
                                        "value":"student",
                                        "name":"T1"
                                    },
                                    {
                                        "join":{
                                            "value":"has_pet",
                                            "name":"T2"
                                        },
                                        "on":{
                                            "eq":[
                                                "T1.stuid",
                                                "T2.stuid"
                                            ]
                                        }
                                    },
                                    {
                                        "join":{
                                            "value":"pets",
                                            "name":"T3"
                                        },
                                        "on":{
                                            "eq":[
                                                "T3.petid",
                                                "T2.petid"
                                            ]
                                        }
                                    }
                                ],
                                "where":{
                                    "eq":[
                                        "T3.pettype",
                                        {
                                            "literal":"cat"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the first name of every student who has a dog but does not have a cat?",
        "SQL":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.age"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"dog"
                            }
                        ]
                    },
                    {
                        "nin":[
                            "T1.stuid",
                            {
                                "select":{
                                    "value":"T1.stuid"
                                },
                                "from":[
                                    {
                                        "value":"student",
                                        "name":"T1"
                                    },
                                    {
                                        "join":{
                                            "value":"has_pet",
                                            "name":"T2"
                                        },
                                        "on":{
                                            "eq":[
                                                "T1.stuid",
                                                "T2.stuid"
                                            ]
                                        }
                                    },
                                    {
                                        "join":{
                                            "value":"pets",
                                            "name":"T3"
                                        },
                                        "on":{
                                            "eq":[
                                                "T3.petid",
                                                "T2.petid"
                                            ]
                                        }
                                    }
                                ],
                                "where":{
                                    "eq":[
                                        "T3.pettype",
                                        {
                                            "literal":"cat"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the type and weight of the youngest pet.",
        "SQL":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"pettype"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"pets",
            "orderby":{
                "value":"pet_age"
            },
            "limit":1
        }
    },
    {
        "db_id":"pets_1",
        "question":"What type of pet is the youngest animal, and how much does it weigh?",
        "SQL":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"pettype"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"pets",
            "orderby":{
                "value":"pet_age"
            },
            "limit":1
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the id and weight of all pets whose age is older than 1.",
        "SQL":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"petid"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"pets",
            "where":{
                "gt":[
                    "pet_age",
                    1
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the id and weight of every pet who is older than 1?",
        "SQL":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"petid"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"pets",
            "where":{
                "gt":[
                    "pet_age",
                    1
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the average and maximum age for each type of pet.",
        "SQL":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"pet_age"
                    }
                },
                {
                    "value":{
                        "max":"pet_age"
                    }
                },
                {
                    "value":"pettype"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"pettype"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the average and maximum age for each pet type?",
        "SQL":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"pet_age"
                    }
                },
                {
                    "value":{
                        "max":"pet_age"
                    }
                },
                {
                    "value":"pettype"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"pettype"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the average weight for each pet type.",
        "SQL":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"weight"
                    }
                },
                {
                    "value":"pettype"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"pettype"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the average weight for each type of pet?",
        "SQL":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"weight"
                    }
                },
                {
                    "value":"pettype"
                }
            ],
            "from":"pets",
            "groupby":{
                "value":"pettype"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the first name and age of students who have a pet.",
        "SQL":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.age"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"What are the different first names and ages of the students who do have pets?",
        "SQL":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.age"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "SQL":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "SQL_parse":{
            "select":{
                "value":"T2.petid"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Lname",
                    {
                        "literal":"Smith"
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the id of the pet owned by the student whose last name is 'Smith'?",
        "SQL":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "SQL_parse":{
            "select":{
                "value":"T2.petid"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Lname",
                    {
                        "literal":"Smith"
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the number of pets for each student who has any pet and student id.",
        "SQL":"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"T1.stuid"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.stuid"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "SQL":"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"t1.stuid"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.stuid",
                            "t2.stuid"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.stuid"
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the first name and gender of student who have more than one pet.",
        "SQL":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.sex"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.stuid"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the first name and gender of the all the students who have more than one pet?",
        "SQL":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.fname"
                },
                {
                    "value":"T1.sex"
                }
            ],
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.stuid"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the last name of the student who has a cat that is age 3.",
        "SQL":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "SQL_parse":{
            "select":{
                "value":"T1.lname"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T3.pet_age",
                            3
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the last name of the student who has a cat that is 3 years old?",
        "SQL":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "SQL_parse":{
            "select":{
                "value":"T1.lname"
            },
            "from":[
                {
                    "value":"student",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"has_pet",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.stuid",
                            "T2.stuid"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"pets",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.petid",
                            "T2.petid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T3.pet_age",
                            3
                        ]
                    },
                    {
                        "eq":[
                            "T3.pettype",
                            {
                                "literal":"cat"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"Find the average age of students who do not have any pet .",
        "SQL":"select avg(age) from student where stuid not in (select stuid from has_pet)",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"student",
            "where":{
                "nin":[
                    "stuid",
                    {
                        "select":{
                            "value":"stuid"
                        },
                        "from":"has_pet"
                    }
                ]
            }
        }
    },
    {
        "db_id":"pets_1",
        "question":"What is the average age for all students who do not own any pets ?",
        "SQL":"select avg(age) from student where stuid not in (select stuid from has_pet)",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"student",
            "where":{
                "nin":[
                    "stuid",
                    {
                        "select":{
                            "value":"stuid"
                        },
                        "from":"has_pet"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many continents are there?",
        "SQL":"SELECT count(*) FROM CONTINENTS;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CONTINENTS"
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of continents?",
        "SQL":"SELECT count(*) FROM CONTINENTS;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CONTINENTS"
        }
    },
    {
        "db_id":"car_1",
        "question":"How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "SQL":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.ContId"
                },
                {
                    "value":"T1.Continent"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CONTINENTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.ContId",
                            "T2.Continent"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.ContId"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"For each continent, list its id, name, and how many countries it has?",
        "SQL":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.ContId"
                },
                {
                    "value":"T1.Continent"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CONTINENTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.ContId",
                            "T2.Continent"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.ContId"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many countries are listed?",
        "SQL":"SELECT count(*) FROM COUNTRIES;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"COUNTRIES"
        }
    },
    {
        "db_id":"car_1",
        "question":"How many countries exist?",
        "SQL":"SELECT count(*) FROM COUNTRIES;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"COUNTRIES"
        }
    },
    {
        "db_id":"car_1",
        "question":"How many models does each car maker produce? List maker full name, id and the number.",
        "SQL":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.FullName"
                },
                {
                    "value":"T1.Id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Id"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the full name of each car maker, along with its id and how many models it produces?",
        "SQL":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.FullName"
                },
                {
                    "value":"T1.Id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Id"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which model of the car has the minimum horsepower?",
        "SQL":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.horsepower",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the model of the car with the smallest amount of horsepower?",
        "SQL":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.horsepower",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"Find the model of the car whose weight is below the average weight.",
        "SQL":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "SQL_parse":{
            "select":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "lt":[
                    "T2.Weight",
                    {
                        "select":{
                            "value":{
                                "avg":"Weight"
                            }
                        },
                        "from":"CARS_DATA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the model for the car with a weight smaller than the average?",
        "SQL":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "SQL_parse":{
            "select":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "lt":[
                    "T2.Weight",
                    {
                        "select":{
                            "value":{
                                "avg":"Weight"
                            }
                        },
                        "from":"CARS_DATA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Find the name of the makers that produced some cars in the year of 1970?",
        "SQL":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Maker"
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.model",
                            "T3.model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T3.MakeId",
                            "T4.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T4.year",
                    {
                        "literal":"1970"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the name of the different car makers who produced a car in 1970?",
        "SQL":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Maker"
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.model",
                            "T3.model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T3.MakeId",
                            "T4.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T4.year",
                    {
                        "literal":"1970"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Find the make and production time of the cars that were produced in the earliest year?",
        "SQL":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Make"
                },
                {
                    "value":"T1.Year"
                }
            ],
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Year",
                    {
                        "select":{
                            "value":{
                                "min":"YEAR"
                            }
                        },
                        "from":"CARS_DATA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maker of the carr produced in the earliest year and what year was it?",
        "SQL":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Make"
                },
                {
                    "value":"T1.Year"
                }
            ],
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Year",
                    {
                        "select":{
                            "value":{
                                "min":"YEAR"
                            }
                        },
                        "from":"CARS_DATA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which distinct car models are the produced after 1980?",
        "SQL":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.model",
                            "T2.model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.MakeId",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T3.year",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the different models for the cards produced after 1980?",
        "SQL":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.model",
                            "T2.model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.MakeId",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T3.year",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many car makers are there in each continents? List the continent name and the count.",
        "SQL":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Continent"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CONTINENTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.ContId",
                            "T2.continent"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"car_makers",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.CountryId",
                            "T3.Country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Continent"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the name of each continent and how many car makers are there in each one?",
        "SQL":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Continent"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"CONTINENTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.ContId",
                            "T2.continent"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"car_makers",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.CountryId",
                            "T3.Country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Continent"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which of the countries has the most car makers? List the country name.",
        "SQL":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T2.CountryName"
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Country"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the name of the country with the most car makers?",
        "SQL":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T2.CountryName"
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Country"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"How many car models are produced by each maker ? Only list the count and the maker full name .",
        "SQL":"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"t2.fullname"
                }
            ],
            "from":[
                {
                    "value":"model_list",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"car_makers",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.maker",
                            "t2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.id"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "SQL":"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"T2.FullName"
                },
                {
                    "value":"T2.id"
                }
            ],
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.id"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the accelerate of the car make amc hornet sportabout (sw)?",
        "SQL":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "SQL_parse":{
            "select":{
                "value":"T1.Accelerate"
            },
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Make",
                    {
                        "literal":"amc hornet sportabout (sw)"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "SQL":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "SQL_parse":{
            "select":{
                "value":"T1.Accelerate"
            },
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Make",
                    {
                        "literal":"amc hornet sportabout (sw)"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many car makers are there in france?",
        "SQL":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.CountryName",
                    {
                        "literal":"france"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of makers of care in France?",
        "SQL":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Country",
                            "T2.CountryId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.CountryName",
                    {
                        "literal":"france"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many car models are produced in the usa?",
        "SQL":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.CountryName",
                    {
                        "literal":"usa"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the count of the car models produced in the United States?",
        "SQL":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Maker",
                            "T2.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"COUNTRIES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Country",
                            "T3.CountryId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.CountryName",
                    {
                        "literal":"usa"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "SQL":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"mpg"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "eq":[
                    "Cylinders",
                    4
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average miles per gallon of all the cards with 4 cylinders?",
        "SQL":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"mpg"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "eq":[
                    "Cylinders",
                    4
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "SQL":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"weight"
                }
            },
            "from":"cars_data",
            "where":{
                "and":[
                    {
                        "eq":[
                            "cylinders",
                            8
                        ]
                    },
                    {
                        "eq":[
                            "year",
                            1974
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "SQL":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"weight"
                }
            },
            "from":"cars_data",
            "where":{
                "and":[
                    {
                        "eq":[
                            "cylinders",
                            8
                        ]
                    },
                    {
                        "eq":[
                            "year",
                            1974
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are all the makers and models?",
        "SQL":"SELECT Maker ,  Model FROM MODEL_LIST;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Maker"
                },
                {
                    "value":"Model"
                }
            ],
            "from":"MODEL_LIST"
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the makers and models?",
        "SQL":"SELECT Maker ,  Model FROM MODEL_LIST;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Maker"
                },
                {
                    "value":"Model"
                }
            ],
            "from":"MODEL_LIST"
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the countries having at least one car maker? List name and id.",
        "SQL":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.CountryName"
                },
                {
                    "value":"T1.CountryId"
                }
            ],
            "from":[
                {
                    "value":"COUNTRIES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryId",
                            "T2.Country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.CountryId"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the names and ids of all countries with at least one car maker?",
        "SQL":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.CountryName"
                },
                {
                    "value":"T1.CountryId"
                }
            ],
            "from":[
                {
                    "value":"COUNTRIES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryId",
                            "T2.Country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.CountryId"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of the cars with horsepower more than 150?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "horsepower",
                    150
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of cars with a horsepower greater than 150?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "horsepower",
                    150
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average weight of cars each year?",
        "SQL":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"Weight"
                    }
                },
                {
                    "value":"YEAR"
                }
            ],
            "from":"CARS_DATA",
            "groupby":{
                "value":"YEAR"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average weight and year for each year?",
        "SQL":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"Weight"
                    }
                },
                {
                    "value":"YEAR"
                }
            ],
            "from":"CARS_DATA",
            "groupby":{
                "value":"YEAR"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which countries in europe have at least 3 car manufacturers?",
        "SQL":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "SQL_parse":{
            "select":{
                "value":"T1.CountryName"
            },
            "from":[
                {
                    "value":"COUNTRIES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CONTINENTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Continent",
                            "T2.ContId"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryId",
                            "T3.Country"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Continent",
                    {
                        "literal":"europe"
                    }
                ]
            },
            "groupby":{
                "value":"T1.CountryName"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the names of all European countries with at least 3 manufacturers?",
        "SQL":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "SQL_parse":{
            "select":{
                "value":"T1.CountryName"
            },
            "from":[
                {
                    "value":"COUNTRIES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CONTINENTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Continent",
                            "T2.ContId"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryId",
                            "T3.Country"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Continent",
                    {
                        "literal":"europe"
                    }
                ]
            },
            "groupby":{
                "value":"T1.CountryName"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "SQL":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.horsepower"
                },
                {
                    "value":"T1.Make"
                }
            ],
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.cylinders",
                    3
                ]
            },
            "orderby":{
                "value":"T2.horsepower",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "SQL":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.horsepower"
                },
                {
                    "value":"T1.Make"
                }
            ],
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.cylinders",
                    3
                ]
            },
            "orderby":{
                "value":"T2.horsepower",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "SQL":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.mpg",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the car model with the highest mpg ?",
        "SQL":"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "SQL_parse":{
            "select":{
                "value":"t1.model"
            },
            "from":[
                {
                    "value":"car_names",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"cars_data",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.makeid",
                            "t2.id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"t2.mpg",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average horsepower of the cars before 1980?",
        "SQL":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"horsepower"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "lt":[
                    "YEAR",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average horsepower for all cars produced before 1980 ?",
        "SQL":"select avg(horsepower) from cars_data where year  <  1980;",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"horsepower"
                }
            },
            "from":"cars_data",
            "where":{
                "lt":[
                    "year",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average edispl of the cars of model volvo?",
        "SQL":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"T2.edispl"
                }
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Model",
                    {
                        "literal":"volvo"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the average edispl for all volvos?",
        "SQL":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"T2.edispl"
                }
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Model",
                    {
                        "literal":"volvo"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maximum accelerate for different number of cylinders?",
        "SQL":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"Accelerate"
                    }
                },
                {
                    "value":"Cylinders"
                }
            ],
            "from":"CARS_DATA",
            "groupby":{
                "value":"Cylinders"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maximum accelerate for all the different cylinders?",
        "SQL":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"Accelerate"
                    }
                },
                {
                    "value":"Cylinders"
                }
            ],
            "from":"CARS_DATA",
            "groupby":{
                "value":"Cylinders"
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which model has the most version(make) of cars?",
        "SQL":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"Model"
            },
            "from":"CAR_NAMES",
            "groupby":{
                "value":"Model"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What model has the most different versions?",
        "SQL":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"Model"
            },
            "from":"CAR_NAMES",
            "groupby":{
                "value":"Model"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"How many cars have more than 4 cylinders?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Cylinders",
                    4
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of cars with more than 4 cylinders?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Cylinders",
                    4
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"how many cars were produced in 1980?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "eq":[
                    "YEAR",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"In 1980, how many cars were made?",
        "SQL":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "eq":[
                    "YEAR",
                    1980
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many car models were produced by the maker with full name American Motor Company?",
        "SQL":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.FullName",
                    {
                        "literal":"American Motor Company"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of car models created by the car maker American Motor Company?",
        "SQL":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.FullName",
                    {
                        "literal":"American Motor Company"
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which makers designed more than 3 car models? List full name and the id.",
        "SQL":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.FullName"
                },
                {
                    "value":"T1.Id"
                }
            ],
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Id"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the names and ids of all makers with more than 3 models?",
        "SQL":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.FullName"
                },
                {
                    "value":"T1.Id"
                }
            ],
            "from":[
                {
                    "value":"CAR_MAKERS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.Maker"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Id"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "SQL":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "SQL_parse":{
            "select_distinct":{
                "value":"T2.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Model",
                            "T2.Model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Maker",
                            "T3.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T4.Id"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T3.FullName",
                            {
                                "literal":"General Motors"
                            }
                        ]
                    },
                    {
                        "gt":[
                            "T4.weight",
                            3500
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "SQL":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "SQL_parse":{
            "select_distinct":{
                "value":"T2.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"MODEL_LIST",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Model",
                            "T2.Model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Maker",
                            "T3.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T4.Id"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T3.FullName",
                            {
                                "literal":"General Motors"
                            }
                        ]
                    },
                    {
                        "gt":[
                            "T4.weight",
                            3500
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "SQL":"select distinct year from cars_data where weight between 3000 and 4000;",
        "SQL_parse":{
            "select_distinct":{
                "value":"year"
            },
            "from":"cars_data",
            "where":{
                "between":[
                    "weight",
                    3000,
                    4000
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "SQL":"select distinct year from cars_data where weight between 3000 and 4000;",
        "SQL_parse":{
            "select_distinct":{
                "value":"year"
            },
            "from":"cars_data",
            "where":{
                "between":[
                    "weight",
                    3000,
                    4000
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the horsepower of the car with the largest accelerate?",
        "SQL":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.horsepower"
            },
            "from":{
                "value":"CARS_DATA",
                "name":"T1"
            },
            "orderby":{
                "value":"T1.accelerate",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the horsepower of the car with the greatest accelerate?",
        "SQL":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.horsepower"
            },
            "from":{
                "value":"CARS_DATA",
                "name":"T1"
            },
            "orderby":{
                "value":"T1.accelerate",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"For model volvo, how many cylinders does the car with the least accelerate have?",
        "SQL":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.cylinders"
            },
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Model",
                    {
                        "literal":"volvo"
                    }
                ]
            },
            "orderby":{
                "value":"T1.accelerate",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"For a volvo model, how many cylinders does the version with least accelerate have?",
        "SQL":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.cylinders"
            },
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Model",
                    {
                        "literal":"volvo"
                    }
                ]
            },
            "orderby":{
                "value":"T1.accelerate",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"How many cars have a larger accelerate than the car with the largest horsepower?",
        "SQL":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Accelerate",
                    {
                        "select":{
                            "value":"Accelerate"
                        },
                        "from":"CARS_DATA",
                        "orderby":{
                            "value":"Horsepower",
                            "sort":"desc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "SQL":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Accelerate",
                    {
                        "select":{
                            "value":"Accelerate"
                        },
                        "from":"CARS_DATA",
                        "orderby":{
                            "value":"Horsepower",
                            "sort":"desc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many countries has more than 2 car makers ?",
        "SQL":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"countries",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"car_makers",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.countryid",
                            "t2.country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.countryid"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of countries with more than 2 car makers ?",
        "SQL":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"countries",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"car_makers",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.countryid",
                            "t2.country"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.countryid"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"How many cars has over 6 cylinders?",
        "SQL":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Cylinders",
                    6
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the number of carsw ith over 6 cylinders?",
        "SQL":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"CARS_DATA",
            "where":{
                "gt":[
                    "Cylinders",
                    6
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"For the cars with 4 cylinders, which model has the largest horsepower?",
        "SQL":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Cylinders",
                    4
                ]
            },
            "orderby":{
                "value":"T2.horsepower",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"For all of the 4 cylinder cars, which model has the most horsepower?",
        "SQL":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "SQL_parse":{
            "select":{
                "value":"T1.Model"
            },
            "from":[
                {
                    "value":"CAR_NAMES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.MakeId",
                            "T2.Id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Cylinders",
                    4
                ]
            },
            "orderby":{
                "value":"T2.horsepower",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"car_1",
        "question":"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "SQL":"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.MakeId"
                },
                {
                    "value":"T2.Make"
                }
            ],
            "from":[
                {
                    "value":"CARS_DATA",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Id",
                            "T2.MakeId"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "gt":[
                            "T1.Horsepower",
                            {
                                "select":{
                                    "value":{
                                        "min":"Horsepower"
                                    }
                                },
                                "from":"CARS_DATA"
                            }
                        ]
                    },
                    {
                        "lte":[
                            "T1.Cylinders",
                            3
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "SQL":"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.makeid"
                },
                {
                    "value":"t2.make"
                }
            ],
            "from":[
                {
                    "value":"cars_data",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"car_names",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.id",
                            "t2.makeid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "gt":[
                            "t1.horsepower",
                            {
                                "select":{
                                    "value":{
                                        "min":"horsepower"
                                    }
                                },
                                "from":"cars_data"
                            }
                        ]
                    },
                    {
                        "lt":[
                            "t1.cylinders",
                            4
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "SQL":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"mpg"
                }
            },
            "from":"cars_data",
            "where":{
                "or":[
                    {
                        "eq":[
                            "cylinders",
                            8
                        ]
                    },
                    {
                        "lt":[
                            "year",
                            1980
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "SQL":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"mpg"
                }
            },
            "from":"cars_data",
            "where":{
                "or":[
                    {
                        "eq":[
                            "cylinders",
                            8
                        ]
                    },
                    {
                        "lt":[
                            "year",
                            1980
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "SQL":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Model",
                            "T2.Model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.MakeId",
                            "T3.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T1.Maker",
                            "T4.Id"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "lt":[
                            "T3.weight",
                            3500
                        ]
                    },
                    {
                        "neq":[
                            "T4.FullName",
                            {
                                "literal":"Ford Motor Company"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "SQL":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.model"
            },
            "from":[
                {
                    "value":"MODEL_LIST",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"CAR_NAMES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Model",
                            "T2.Model"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CARS_DATA",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.MakeId",
                            "T3.Id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"CAR_MAKERS",
                        "name":"T4"
                    },
                    "on":{
                        "eq":[
                            "T1.Maker",
                            "T4.Id"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "lt":[
                            "T3.weight",
                            3500
                        ]
                    },
                    {
                        "neq":[
                            "T4.FullName",
                            {
                                "literal":"Ford Motor Company"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the name of the countries where there is not a single car maker?",
        "SQL":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"CountryName"
                    },
                    "from":"countries"
                },
                {
                    "select":{
                        "value":"T1.CountryName"
                    },
                    "from":[
                        {
                            "value":"countries",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"CAR_MAKERS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.countryId",
                                    "T2.Country"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the names of the countries with no car makers?",
        "SQL":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"CountryName"
                    },
                    "from":"countries"
                },
                {
                    "select":{
                        "value":"T1.CountryName"
                    },
                    "from":[
                        {
                            "value":"countries",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"CAR_MAKERS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.countryId",
                                    "T2.Country"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"car_1",
        "question":"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "SQL":"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"t1.id"
                        },
                        {
                            "value":"t1.maker"
                        }
                    ],
                    "from":[
                        {
                            "value":"car_makers",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"model_list",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.id",
                                    "t2.maker"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"t1.id"
                    },
                    "having":{
                        "gte":[
                            {
                                "count":"*"
                            },
                            2
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"t1.id"
                        },
                        {
                            "value":"t1.maker"
                        }
                    ],
                    "from":[
                        {
                            "value":"car_makers",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"model_list",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.id",
                                    "t2.maker"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"car_names",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t2.model",
                                    "t3.model"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"t1.id"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            3
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "SQL":"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.Id"
                        },
                        {
                            "value":"T1.Maker"
                        }
                    ],
                    "from":[
                        {
                            "value":"CAR_MAKERS",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"MODEL_LIST",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Id",
                                    "T2.Maker"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"T1.Id"
                    },
                    "having":{
                        "gte":[
                            {
                                "count":"*"
                            },
                            2
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.Id"
                        },
                        {
                            "value":"T1.Maker"
                        }
                    ],
                    "from":[
                        {
                            "value":"CAR_MAKERS",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"MODEL_LIST",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Id",
                                    "T2.Maker"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"CAR_NAMES",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T2.model",
                                    "T3.model"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"T1.Id"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            3
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "SQL":"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "SQL_parse":{
            "union":[
                {
                    "select":[
                        {
                            "value":"T1.countryId"
                        },
                        {
                            "value":"T1.CountryName"
                        }
                    ],
                    "from":[
                        {
                            "value":"Countries",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"CAR_MAKERS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.CountryId",
                                    "T2.Country"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"T1.countryId"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            3
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.countryId"
                        },
                        {
                            "value":"T1.CountryName"
                        }
                    ],
                    "from":[
                        {
                            "value":"Countries",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"CAR_MAKERS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.CountryId",
                                    "T2.Country"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"MODEL_LIST",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T2.Id",
                                    "T3.Maker"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T3.Model",
                            {
                                "literal":"fiat"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"car_1",
        "question":"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "SQL":"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "SQL_parse":{
            "union":[
                {
                    "select":[
                        {
                            "value":"t1.countryid"
                        },
                        {
                            "value":"t1.countryname"
                        }
                    ],
                    "from":[
                        {
                            "value":"countries",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"car_makers",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.countryid",
                                    "t2.country"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"t1.countryid"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            3
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"t1.countryid"
                        },
                        {
                            "value":"t1.countryname"
                        }
                    ],
                    "from":[
                        {
                            "value":"countries",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"car_makers",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.countryid",
                                    "t2.country"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"model_list",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t2.id",
                                    "t3.maker"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "t3.model",
                            {
                                "literal":"fiat"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which country does Airline \"JetBlue Airways\" belong to?",
        "SQL":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":"Country"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What country is Jetblue Airways affiliated with?",
        "SQL":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":"Country"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the abbreviation of Airline \"JetBlue Airways\"?",
        "SQL":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":"Abbreviation"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which abbreviation corresponds to Jetblue Airways?",
        "SQL":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":"Abbreviation"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"List all airline names and their abbreviations in \"USA\".",
        "SQL":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Airline"
                },
                {
                    "value":"Abbreviation"
                }
            ],
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Country",
                    "USA"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are the airline names and abbreviations for airlines in the USA?",
        "SQL":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Airline"
                },
                {
                    "value":"Abbreviation"
                }
            ],
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Country",
                    "USA"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"List the airport code and name in the city of Anthony.",
        "SQL":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"AirportCode"
                },
                {
                    "value":"AirportName"
                }
            ],
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "city",
                    "Anthony"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the airport code and airport name corresonding to the city Anthony.",
        "SQL":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"AirportCode"
                },
                {
                    "value":"AirportName"
                }
            ],
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "city",
                    "Anthony"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many airlines do we have?",
        "SQL":"SELECT count(*) FROM AIRLINES",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRLINES"
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the total number of airlines?",
        "SQL":"SELECT count(*) FROM AIRLINES",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRLINES"
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many airports do we have?",
        "SQL":"SELECT count(*) FROM AIRPORTS",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRPORTS"
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of  airports.",
        "SQL":"SELECT count(*) FROM AIRPORTS",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRPORTS"
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights do we have?",
        "SQL":"SELECT count(*) FROM FLIGHTS",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS"
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of flights.",
        "SQL":"SELECT count(*) FROM FLIGHTS",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS"
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airline has abbreviation 'UAL'?",
        "SQL":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "SQL_parse":{
            "select":{
                "value":"Airline"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Abbreviation",
                    "UAL"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the airline with abbreviation 'UAL'.",
        "SQL":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "SQL_parse":{
            "select":{
                "value":"Airline"
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Abbreviation",
                    "UAL"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many airlines are from USA?",
        "SQL":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Country",
                    "USA"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of airlines in the USA.",
        "SQL":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"AIRLINES",
            "where":{
                "eq":[
                    "Country",
                    "USA"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which city and country is the Alton airport at?",
        "SQL":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"City"
                },
                {
                    "value":"Country"
                }
            ],
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "AirportName",
                    "Alton"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the city and country for the Alton airport.",
        "SQL":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"City"
                },
                {
                    "value":"Country"
                }
            ],
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "AirportName",
                    "Alton"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the airport name for airport 'AKO'?",
        "SQL":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "AirportCode",
                    "AKO"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the name of the airport with code 'AKO'.",
        "SQL":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "AirportCode",
                    "AKO"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are airport names at City 'Aberdeen'?",
        "SQL":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are the names of airports in Aberdeen?",
        "SQL":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"AIRPORTS",
            "where":{
                "eq":[
                    "City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights depart from 'APG'?",
        "SQL":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "SourceAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Count the number of flights departing from 'APG'.",
        "SQL":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "SourceAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights have destination ATO?",
        "SQL":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "DestAirport",
                    "ATO"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Count the number of flights into ATO.",
        "SQL":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "DestAirport",
                    "ATO"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights depart from City Aberdeen?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of flights departing from Aberdeen.",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights arriving in Aberdeen city?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of flights arriving in Aberdeen.",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T3.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T2.City",
                            "Ashley"
                        ]
                    },
                    {
                        "eq":[
                            "T3.City",
                            "Aberdeen"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights fly from Aberdeen to Ashley?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T3.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T2.City",
                            "Ashley"
                        ]
                    },
                    {
                        "eq":[
                            "T3.City",
                            "Aberdeen"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights does airline 'JetBlue Airways' have?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the number of Jetblue Airways flights.",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Airline",
                            "T2.uid"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Airline",
                    "JetBlue Airways"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many 'United Airlines' flights go to Airport 'ASY'?",
        "SQL":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.Airline",
                            "T1.uid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Airline",
                            "United Airlines"
                        ]
                    },
                    {
                        "eq":[
                            "T2.DestAirport",
                            "ASY"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Count the number of United Airlines flights arriving in ASY Airport.",
        "SQL":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.Airline",
                            "T1.uid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Airline",
                            "United Airlines"
                        ]
                    },
                    {
                        "eq":[
                            "T2.DestAirport",
                            "ASY"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many 'United Airlines' flights depart from Airport 'AHD'?",
        "SQL":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.Airline",
                            "T1.uid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Airline",
                            "United Airlines"
                        ]
                    },
                    {
                        "eq":[
                            "T2.SourceAirport",
                            "AHD"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Return the number of United Airlines flights leaving from AHD Airport.",
        "SQL":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.Airline",
                            "T1.uid"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Airline",
                            "United Airlines"
                        ]
                    },
                    {
                        "eq":[
                            "T2.SourceAirport",
                            "AHD"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many United Airlines flights go to City 'Aberdeen'?",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.uid",
                            "T1.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T2.City",
                            "Aberdeen"
                        ]
                    },
                    {
                        "eq":[
                            "T3.Airline",
                            "United Airlines"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Count the number of United Airlines flights that arrive in Aberdeen.",
        "SQL":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T3.uid",
                            "T1.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T2.City",
                            "Aberdeen"
                        ]
                    },
                    {
                        "eq":[
                            "T3.Airline",
                            "United Airlines"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which city has most number of arriving flights?",
        "SQL":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.City"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.AirportCode",
                            "T2.DestAirport"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.City"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which city has the most frequent destination airport?",
        "SQL":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.City"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.AirportCode",
                            "T2.DestAirport"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.City"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which city has most number of departing flights?",
        "SQL":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.City"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.AirportCode",
                            "T2.SourceAirport"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.City"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which city is the most frequent source airport?",
        "SQL":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.City"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.AirportCode",
                            "T2.SourceAirport"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.City"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the code of airport that has the highest number of flights?",
        "SQL":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.AirportCode"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "or":[
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.DestAirport"
                                ]
                            },
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.SourceAirport"
                                ]
                            }
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.AirportCode"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the airport code of the airport with the most flights?",
        "SQL":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.AirportCode"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "or":[
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.DestAirport"
                                ]
                            },
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.SourceAirport"
                                ]
                            }
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.AirportCode"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the code of airport that has fewest number of flights?",
        "SQL":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.AirportCode"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "or":[
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.DestAirport"
                                ]
                            },
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.SourceAirport"
                                ]
                            }
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.AirportCode"
            },
            "orderby":{
                "value":{
                    "count":"*"
                }
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the code of the airport with the least flights.",
        "SQL":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.AirportCode"
            },
            "from":[
                {
                    "value":"AIRPORTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "or":[
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.DestAirport"
                                ]
                            },
                            {
                                "eq":[
                                    "T1.AirportCode",
                                    "T2.SourceAirport"
                                ]
                            }
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.AirportCode"
            },
            "orderby":{
                "value":{
                    "count":"*"
                }
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airline has most number of flights?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What airline serves the most flights?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find the abbreviation and country of the airline that has fewest number of flights?",
        "SQL":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Abbreviation"
                },
                {
                    "value":"T1.Country"
                }
            ],
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "orderby":{
                "value":{
                    "count":"*"
                }
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "SQL":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Abbreviation"
                },
                {
                    "value":"T1.Country"
                }
            ],
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "orderby":{
                "value":{
                    "count":"*"
                }
            },
            "limit":1
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are airlines that have some flight departing from airport 'AHD'?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.SourceAirport",
                    "AHD"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have a flight with source airport AHD?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.SourceAirport",
                    "AHD"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are airlines that have flights arriving at airport 'AHD'?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.DestAirport",
                    "AHD"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have a flight with destination airport AHD?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.DestAirport",
                    "AHD"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "APG"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "CVO"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have departing flights from both APG and CVO airports?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "APG"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "CVO"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "CVO"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "APG"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have departures from CVO but not from APG airports?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "CVO"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Airline"
                    },
                    "from":[
                        {
                            "value":"AIRLINES",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"FLIGHTS",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.uid",
                                    "T2.Airline"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.SourceAirport",
                            "APG"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find all airlines that have at least 10 flights.",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    10
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have at least 10 flights?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    10
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find all airlines that have fewer than 200 flights.",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "having":{
                "lt":[
                    {
                        "count":"*"
                    },
                    200
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airlines have less than 200 flights?",
        "SQL":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "SQL_parse":{
            "select":{
                "value":"T1.Airline"
            },
            "from":[
                {
                    "value":"AIRLINES",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"FLIGHTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.uid",
                            "T2.Airline"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Airline"
            },
            "having":{
                "lt":[
                    {
                        "count":"*"
                    },
                    200
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are flight numbers of Airline \"United Airlines\"?",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.uid",
                            "T1.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Airline",
                    "United Airlines"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which flight numbers correspond to United Airlines flights?",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRLINES",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.uid",
                            "T1.Airline"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Airline",
                    "United Airlines"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are flight numbers of flights departing from Airport \"APG\"?",
        "SQL":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":"FlightNo"
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "SourceAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the flight numbers of flights leaving from APG.",
        "SQL":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":"FlightNo"
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "SourceAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are flight numbers of flights arriving at Airport \"APG\"?",
        "SQL":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":"FlightNo"
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "DestAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the flight numbers of flights landing at APG.",
        "SQL":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "SQL_parse":{
            "select":{
                "value":"FlightNo"
            },
            "from":"FLIGHTS",
            "where":{
                "eq":[
                    "DestAirport",
                    "APG"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are flight numbers of flights departing from City \"Aberdeen \"?",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the flight numbers of flights leaving from Aberdeen.",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.SourceAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Give the flight numbers of flights arriving in Aberdeen.",
        "SQL":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "SQL_parse":{
            "select":{
                "value":"T1.FlightNo"
            },
            "from":[
                {
                    "value":"FLIGHTS",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"AIRPORTS",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.City",
                    "Aberdeen"
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find the number of flights landing in the city of Aberdeen or Abilene.",
        "SQL":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Flights",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Airports",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T2.city",
                            "Aberdeen"
                        ]
                    },
                    {
                        "eq":[
                            "T2.city",
                            "Abilene"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"How many flights land in Aberdeen or Abilene?",
        "SQL":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Flights",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Airports",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.DestAirport",
                            "T2.AirportCode"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T2.city",
                            "Aberdeen"
                        ]
                    },
                    {
                        "eq":[
                            "T2.city",
                            "Abilene"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Find the name of airports which do not have any flight in and out.",
        "SQL":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"Airports",
            "where":{
                "nin":[
                    "AirportCode",
                    {
                        "union":[
                            {
                                "select":{
                                    "value":"SourceAirport"
                                },
                                "from":"Flights"
                            },
                            {
                                "select":{
                                    "value":"DestAirport"
                                },
                                "from":"Flights"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"flight_2",
        "question":"Which airports do not have departing or arriving flights?",
        "SQL":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "SQL_parse":{
            "select":{
                "value":"AirportName"
            },
            "from":"Airports",
            "where":{
                "nin":[
                    "AirportCode",
                    {
                        "union":[
                            {
                                "select":{
                                    "value":"SourceAirport"
                                },
                                "from":"Flights"
                            },
                            {
                                "select":{
                                    "value":"DestAirport"
                                },
                                "from":"Flights"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"How many employees are there?",
        "SQL":"SELECT count(*) FROM employee",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"employee"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Count the number of employees",
        "SQL":"SELECT count(*) FROM employee",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"employee"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Sort employee names by their age in ascending order.",
        "SQL":"SELECT name FROM employee ORDER BY age",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"employee",
            "orderby":{
                "value":"age"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"List the names of employees and sort in ascending order of age.",
        "SQL":"SELECT name FROM employee ORDER BY age",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"employee",
            "orderby":{
                "value":"age"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What is the number of employees from each city?",
        "SQL":"SELECT count(*) ,  city FROM employee GROUP BY city",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"city"
                }
            ],
            "from":"employee",
            "groupby":{
                "value":"city"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Count the number of employees for each city.",
        "SQL":"SELECT count(*) ,  city FROM employee GROUP BY city",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"city"
                }
            ],
            "from":"employee",
            "groupby":{
                "value":"city"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which cities do more than one employee under age 30 come from?",
        "SQL":"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"city"
            },
            "from":"employee",
            "where":{
                "lt":[
                    "age",
                    30
                ]
            },
            "groupby":{
                "value":"city"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the cities that have more than one employee under age 30.",
        "SQL":"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"city"
            },
            "from":"employee",
            "where":{
                "lt":[
                    "age",
                    30
                ]
            },
            "groupby":{
                "value":"city"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the number of shops in each location.",
        "SQL":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"LOCATION"
                }
            ],
            "from":"shop",
            "groupby":{
                "value":"LOCATION"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"How many shops are there in each location?",
        "SQL":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"LOCATION"
                }
            ],
            "from":"shop",
            "groupby":{
                "value":"LOCATION"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the manager name and district of the shop whose number of products is the largest.",
        "SQL":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"manager_name"
                },
                {
                    "value":"district"
                }
            ],
            "from":"shop",
            "orderby":{
                "value":"number_products",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What are the manager name and district of the shop that sells the largest number of products?",
        "SQL":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"manager_name"
                },
                {
                    "value":"district"
                }
            ],
            "from":"shop",
            "orderby":{
                "value":"number_products",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"find the minimum and maximum number of products of all stores.",
        "SQL":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "min":"Number_products"
                    }
                },
                {
                    "value":{
                        "max":"Number_products"
                    }
                }
            ],
            "from":"shop"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What are the minimum and maximum number of products across all the shops?",
        "SQL":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "min":"Number_products"
                    }
                },
                {
                    "value":{
                        "max":"Number_products"
                    }
                }
            ],
            "from":"shop"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Return the name, location and district of all shops in descending order of number of products.",
        "SQL":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"LOCATION"
                },
                {
                    "value":"district"
                }
            ],
            "from":"shop",
            "orderby":{
                "value":"number_products",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "SQL":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"LOCATION"
                },
                {
                    "value":"district"
                }
            ],
            "from":"shop",
            "orderby":{
                "value":"number_products",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the names of stores whose number products is more than the average number of products.",
        "SQL":"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"shop",
            "where":{
                "gt":[
                    "number_products",
                    {
                        "select":{
                            "value":{
                                "avg":"number_products"
                            }
                        },
                        "from":"shop"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which shops' number products is above the average? Give me the shop names.",
        "SQL":"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"shop",
            "where":{
                "gt":[
                    "number_products",
                    {
                        "select":{
                            "value":{
                                "avg":"number_products"
                            }
                        },
                        "from":"shop"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"find the name of employee who was awarded the most times in the evaluation.",
        "SQL":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t1.name"
            },
            "from":[
                {
                    "value":"employee",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"evaluation",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.Employee_ID",
                            "t2.Employee_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.Employee_ID"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which employee received the most awards in evaluations? Give me the employee name.",
        "SQL":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t1.name"
            },
            "from":[
                {
                    "value":"employee",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"evaluation",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.Employee_ID",
                            "t2.Employee_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.Employee_ID"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the name of the employee who got the highest one time bonus.",
        "SQL":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t1.name"
            },
            "from":[
                {
                    "value":"employee",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"evaluation",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.Employee_ID",
                            "t2.Employee_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"t2.bonus",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which employee received the biggest bonus? Give me the employee name.",
        "SQL":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t1.name"
            },
            "from":[
                {
                    "value":"employee",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"evaluation",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.Employee_ID",
                            "t2.Employee_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"t2.bonus",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the names of employees who never won any award in the evaluation.",
        "SQL":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"employee",
            "where":{
                "nin":[
                    "Employee_ID",
                    {
                        "select":{
                            "value":"Employee_ID"
                        },
                        "from":"evaluation"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What are the names of the employees who never received any evaluation?",
        "SQL":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"employee",
            "where":{
                "nin":[
                    "Employee_ID",
                    {
                        "select":{
                            "value":"Employee_ID"
                        },
                        "from":"evaluation"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What is the name of the shop that is hiring the largest number of employees?",
        "SQL":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t2.name"
            },
            "from":[
                {
                    "value":"hiring",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"shop",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.shop_id",
                            "t2.shop_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.shop_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which shop has the most employees? Give me the shop name.",
        "SQL":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"t2.name"
            },
            "from":[
                {
                    "value":"hiring",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"shop",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.shop_id",
                            "t2.shop_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.shop_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the name of the shops that do not hire any employee.",
        "SQL":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"shop",
            "where":{
                "nin":[
                    "shop_id",
                    {
                        "select":{
                            "value":"shop_id"
                        },
                        "from":"hiring"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which shops run with no employees? Find the shop names",
        "SQL":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"shop",
            "where":{
                "nin":[
                    "shop_id",
                    {
                        "select":{
                            "value":"shop_id"
                        },
                        "from":"hiring"
                    }
                ]
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the number of employees hired in each shop; show the shop name as well.",
        "SQL":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"t2.name"
                }
            ],
            "from":[
                {
                    "value":"hiring",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"shop",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.shop_id",
                            "t2.shop_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.name"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"For each shop, return the number of employees working there and the name of the shop.",
        "SQL":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"t2.name"
                }
            ],
            "from":[
                {
                    "value":"hiring",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"shop",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.shop_id",
                            "t2.shop_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.name"
            }
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What is total bonus given in all evaluations?",
        "SQL":"SELECT sum(bonus) FROM evaluation",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"bonus"
                }
            },
            "from":"evaluation"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the total amount of bonus given in all the evaluations.",
        "SQL":"SELECT sum(bonus) FROM evaluation",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"bonus"
                }
            },
            "from":"evaluation"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Give me all the information about hiring.",
        "SQL":"SELECT * FROM hiring",
        "SQL_parse":{
            "select":{
                "all_columns":{

                }
            },
            "from":"hiring"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"What is all the information about hiring?",
        "SQL":"SELECT * FROM hiring",
        "SQL_parse":{
            "select":{
                "all_columns":{

                }
            },
            "from":"hiring"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "SQL":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"district"
                    },
                    "from":"shop",
                    "where":{
                        "lt":[
                            "Number_products",
                            3000
                        ]
                    }
                },
                {
                    "select":{
                        "value":"district"
                    },
                    "from":"shop",
                    "where":{
                        "gt":[
                            "Number_products",
                            10000
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "SQL":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"district"
                    },
                    "from":"shop",
                    "where":{
                        "lt":[
                            "Number_products",
                            3000
                        ]
                    }
                },
                {
                    "select":{
                        "value":"district"
                    },
                    "from":"shop",
                    "where":{
                        "gt":[
                            "Number_products",
                            10000
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"How many different store locations are there?",
        "SQL":"SELECT count(DISTINCT LOCATION) FROM shop",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"LOCATION"
                }
            },
            "from":"shop"
        }
    },
    {
        "db_id":"employee_hire_evaluation",
        "question":"Count the number of distinct store locations.",
        "SQL":"SELECT count(DISTINCT LOCATION) FROM shop",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"LOCATION"
                }
            },
            "from":"shop"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many documents do we have?",
        "SQL":"SELECT count(*) FROM Documents",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of documents.",
        "SQL":"SELECT count(*) FROM Documents",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"List document IDs, document names, and document descriptions for all documents.",
        "SQL":"SELECT document_id ,  document_name ,  document_description FROM Documents",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":"document_name"
                },
                {
                    "value":"document_description"
                }
            ],
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids, names, and descriptions for all documents?",
        "SQL":"SELECT document_id ,  document_name ,  document_description FROM Documents",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":"document_name"
                },
                {
                    "value":"document_description"
                }
            ],
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the document name and template id for document with description with the letter 'w' in it?",
        "SQL":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_name"
                },
                {
                    "value":"template_id"
                }
            ],
            "from":"Documents",
            "where":{
                "like":[
                    "Document_Description",
                    "%w%"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the names and template ids for documents that contain the letter w in their description.",
        "SQL":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_name"
                },
                {
                    "value":"template_id"
                }
            ],
            "from":"Documents",
            "where":{
                "like":[
                    "Document_Description",
                    "%w%"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the document id, template id and description for document named \"Robbin CV\"?",
        "SQL":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":"template_id"
                },
                {
                    "value":"Document_Description"
                }
            ],
            "from":"Documents",
            "where":{
                "eq":[
                    "document_name",
                    "Robbin CV"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the document id, template id, and description for the document with the name Robbin CV.",
        "SQL":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":"template_id"
                },
                {
                    "value":"Document_Description"
                }
            ],
            "from":"Documents",
            "where":{
                "eq":[
                    "document_name",
                    "Robbin CV"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many different templates do all document use?",
        "SQL":"SELECT count(DISTINCT template_id) FROM Documents",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"template_id"
                }
            },
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of different templates used for documents.",
        "SQL":"SELECT count(DISTINCT template_id) FROM Documents",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"template_id"
                }
            },
            "from":"Documents"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many documents are using the template with type code 'PPT'?",
        "SQL":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Documents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Template_ID",
                            "T2.Template_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Template_Type_Code",
                    {
                        "literal":"PPT"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of documents that use the PPT template type.",
        "SQL":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Documents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Template_ID",
                            "T2.Template_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Template_Type_Code",
                    {
                        "literal":"PPT"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template ids and number of documents using each template.",
        "SQL":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Documents",
            "groupby":{
                "value":"template_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are all different template ids used for documents, and how many times were each of them used?",
        "SQL":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Documents",
            "groupby":{
                "value":"template_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the id and type code for the template used by the most documents?",
        "SQL":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.template_id"
                },
                {
                    "value":"T2.Template_Type_Code"
                }
            ],
            "from":[
                {
                    "value":"Documents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the id and type code of the template that is used for the greatest number of documents.",
        "SQL":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.template_id"
                },
                {
                    "value":"T2.Template_Type_Code"
                }
            ],
            "from":[
                {
                    "value":"Documents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show ids for all templates that are used by more than one document.",
        "SQL":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"template_id"
            },
            "from":"Documents",
            "groupby":{
                "value":"template_id"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the template ids of any templates used in more than a single document?",
        "SQL":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"template_id"
            },
            "from":"Documents",
            "groupby":{
                "value":"template_id"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show ids for all templates not used by any document.",
        "SQL":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"template_id"
                    },
                    "from":"Templates"
                },
                {
                    "select":{
                        "value":"template_id"
                    },
                    "from":"Documents"
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids for templates that are not used in any documents?",
        "SQL":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"template_id"
                    },
                    "from":"Templates"
                },
                {
                    "select":{
                        "value":"template_id"
                    },
                    "from":"Documents"
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many templates do we have?",
        "SQL":"SELECT count(*) FROM Templates",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of templates.",
        "SQL":"SELECT count(*) FROM Templates",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show template ids, version numbers, and template type codes for all templates.",
        "SQL":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_id"
                },
                {
                    "value":"version_number"
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids, version numbers, and type codes for each template?",
        "SQL":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_id"
                },
                {
                    "value":"version_number"
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all distinct template type codes for all templates.",
        "SQL":"SELECT DISTINCT template_type_code FROM Templates",
        "SQL_parse":{
            "select_distinct":{
                "value":"template_type_code"
            },
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the different template type codes?",
        "SQL":"SELECT DISTINCT template_type_code FROM Templates",
        "SQL_parse":{
            "select_distinct":{
                "value":"template_type_code"
            },
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids of templates with template type code PP or PPT?",
        "SQL":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "SQL_parse":{
            "select":{
                "value":"template_id"
            },
            "from":"Templates",
            "where":{
                "or":[
                    {
                        "eq":[
                            "template_type_code",
                            "PP"
                        ]
                    },
                    {
                        "eq":[
                            "template_type_code",
                            "PPT"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the ids of templates that have the code PP or PPT.",
        "SQL":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "SQL_parse":{
            "select":{
                "value":"template_id"
            },
            "from":"Templates",
            "where":{
                "or":[
                    {
                        "eq":[
                            "template_type_code",
                            "PP"
                        ]
                    },
                    {
                        "eq":[
                            "template_type_code",
                            "PPT"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many templates have template type code CV?",
        "SQL":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Templates",
            "where":{
                "eq":[
                    "template_type_code",
                    "CV"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of templates of the type CV.",
        "SQL":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Templates",
            "where":{
                "eq":[
                    "template_type_code",
                    "CV"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the version number and template type code for the template with version number later than 5?",
        "SQL":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "SQL_parse":{
            "select":[
                {
                    "value":"version_number"
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates",
            "where":{
                "gt":[
                    "version_number",
                    5
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the version numbers and template type codes of templates with a version number greater than 5.",
        "SQL":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "SQL_parse":{
            "select":[
                {
                    "value":"version_number"
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates",
            "where":{
                "gt":[
                    "version_number",
                    5
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template type codes and number of templates for each.",
        "SQL":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_type_code"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the different template type codes, and how many templates correspond to each?",
        "SQL":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_type_code"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Which template type code has most number of templates?",
        "SQL":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the type code of the template type that the most templates belong to.",
        "SQL":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template type codes with less than three templates.",
        "SQL":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            },
            "having":{
                "lt":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the codes of template types that have fewer than 3 templates?",
        "SQL":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Templates",
            "groupby":{
                "value":"template_type_code"
            },
            "having":{
                "lt":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What the smallest version number and its template type code?",
        "SQL":"SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "min":"Version_Number"
                    }
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the lowest version number, along with its corresponding template type code.",
        "SQL":"SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "min":"Version_Number"
                    }
                },
                {
                    "value":"template_type_code"
                }
            ],
            "from":"Templates"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the template type code of the template used by document with the name \"Data base\"?",
        "SQL":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "SQL_parse":{
            "select":{
                "value":"T1.template_type_code"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    "Data base"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the template type code of the template that is used by a document named Data base.",
        "SQL":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "SQL_parse":{
            "select":{
                "value":"T1.template_type_code"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    "Data base"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all document names using templates with template type code BK.",
        "SQL":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "SQL_parse":{
            "select":{
                "value":"T2.document_name"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.template_type_code",
                    "BK"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the names of documents that use templates with the code BK?",
        "SQL":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "SQL_parse":{
            "select":{
                "value":"T2.document_name"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.template_type_code",
                    "BK"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template type codes and the number of documents using each type.",
        "SQL":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.template_type_code"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_type_code"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the different template type codes, and how many documents use each type?",
        "SQL":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.template_type_code"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_type_code"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Which template type code is used by most number of documents?",
        "SQL":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.template_type_code"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_type_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the code of the template type that is most commonly used in documents.",
        "SQL":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.template_type_code"
            },
            "from":[
                {
                    "value":"Templates",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_id",
                            "T2.template_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.template_type_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template type codes that are not used by any document.",
        "SQL":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"template_type_code"
                    },
                    "from":"Templates"
                },
                {
                    "select":{
                        "value":"template_type_code"
                    },
                    "from":[
                        {
                            "value":"Templates",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Documents",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.template_id",
                                    "T2.template_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the codes of template types that are not used for any document?",
        "SQL":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"template_type_code"
                    },
                    "from":"Templates"
                },
                {
                    "select":{
                        "value":"template_type_code"
                    },
                    "from":[
                        {
                            "value":"Templates",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Documents",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.template_id",
                                    "T2.template_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all template type codes and descriptions.",
        "SQL":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_type_code"
                },
                {
                    "value":"template_type_description"
                }
            ],
            "from":"Ref_template_types"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the type codes and descriptions for all template types?",
        "SQL":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "SQL_parse":{
            "select":[
                {
                    "value":"template_type_code"
                },
                {
                    "value":"template_type_description"
                }
            ],
            "from":"Ref_template_types"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the template type descriptions for template type code \"AD\".",
        "SQL":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "SQL_parse":{
            "select":{
                "value":"template_type_description"
            },
            "from":"Ref_template_types",
            "where":{
                "eq":[
                    "template_type_code",
                    "AD"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the template type description of the template type with the code AD.",
        "SQL":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "SQL_parse":{
            "select":{
                "value":"template_type_description"
            },
            "from":"Ref_template_types",
            "where":{
                "eq":[
                    "template_type_code",
                    "AD"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the template type code for template type description \"Book\".",
        "SQL":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Ref_template_types",
            "where":{
                "eq":[
                    "template_type_description",
                    "Book"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the type code of the template type with the description \"Book\".",
        "SQL":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "SQL_parse":{
            "select":{
                "value":"template_type_code"
            },
            "from":"Ref_template_types",
            "where":{
                "eq":[
                    "template_type_description",
                    "Book"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the distinct template type descriptions for the templates ever used by any document?",
        "SQL":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.template_type_description"
            },
            "from":[
                {
                    "value":"Ref_template_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_type_code",
                            "T2.template_type_code"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Template_ID",
                            "T3.template_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the different descriptions for templates that have been used in a document.",
        "SQL":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.template_type_description"
            },
            "from":[
                {
                    "value":"Ref_template_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_type_code",
                            "T2.template_type_code"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.Template_ID",
                            "T3.template_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the template ids with template type description \"Presentation\".",
        "SQL":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "SQL_parse":{
            "select":{
                "value":"T2.template_id"
            },
            "from":[
                {
                    "value":"Ref_template_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_type_code",
                            "T2.template_type_code"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.template_type_description",
                    "Presentation"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the ids corresponding to templates with the description 'Presentation'.",
        "SQL":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "SQL_parse":{
            "select":{
                "value":"T2.template_id"
            },
            "from":[
                {
                    "value":"Ref_template_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Templates",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.template_type_code",
                            "T2.template_type_code"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.template_type_description",
                    "Presentation"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many paragraphs in total?",
        "SQL":"SELECT count(*) FROM Paragraphs",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Paragraphs"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of paragraphs.",
        "SQL":"SELECT count(*) FROM Paragraphs",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Paragraphs"
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"How many paragraphs for the document with name 'Summer Show'?",
        "SQL":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_ID",
                            "T2.document_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    {
                        "literal":"Summer Show"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Count the number of paragraphs in the document named 'Summer Show'.",
        "SQL":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_ID",
                            "T2.document_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    {
                        "literal":"Summer Show"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show paragraph details for paragraph with text 'Korea ' .",
        "SQL":"select other_details from paragraphs where paragraph_text like 'korea'",
        "SQL_parse":{
            "select":{
                "value":"other_details"
            },
            "from":"paragraphs",
            "where":{
                "like":[
                    "paragraph_text",
                    {
                        "literal":"korea"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the details for the paragraph that includes the text 'Korea ' ?",
        "SQL":"select other_details from paragraphs where paragraph_text like 'korea'",
        "SQL_parse":{
            "select":{
                "value":"other_details"
            },
            "from":"paragraphs",
            "where":{
                "like":[
                    "paragraph_text",
                    {
                        "literal":"korea"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "SQL":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.paragraph_id"
                },
                {
                    "value":"T1.paragraph_text"
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Document_Name",
                    {
                        "literal":"Welcome to NY"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "SQL":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.paragraph_id"
                },
                {
                    "value":"T1.paragraph_text"
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Document_Name",
                    {
                        "literal":"Welcome to NY"
                    }
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all paragraph texts for the document \"Customer reviews\".",
        "SQL":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "SQL_parse":{
            "select":{
                "value":"T1.paragraph_text"
            },
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    "Customer reviews"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the paragraph texts for the document with the name 'Customer reviews'?",
        "SQL":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "SQL_parse":{
            "select":{
                "value":"T1.paragraph_text"
            },
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.document_name",
                    "Customer reviews"
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all document ids and the number of paragraphs in each document. Order by document id.",
        "SQL":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "orderby":{
                "value":"document_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "SQL":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"document_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "orderby":{
                "value":"document_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show all document ids, names and the number of paragraphs in each document.",
        "SQL":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.document_id"
                },
                {
                    "value":"T2.document_name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.document_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids and names of each document, as well as the number of paragraphs in each?",
        "SQL":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.document_id"
                },
                {
                    "value":"T2.document_name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.document_id"
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"List all document ids with at least two paragraphs.",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids of documents that have 2 or more paragraphs?",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the document id and name with greatest number of paragraphs?",
        "SQL":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.document_id"
                },
                {
                    "value":"T2.document_name"
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.document_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the id and name of the document with the most paragraphs.",
        "SQL":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.document_id"
                },
                {
                    "value":"T2.document_name"
                }
            ],
            "from":[
                {
                    "value":"Paragraphs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Documents",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.document_id",
                            "T2.document_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.document_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the document id with least number of paragraphs?",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Return the id of the document with the fewest paragraphs.",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What is the document id with 1 to 2 paragraphs?",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "having":{
                "between":[
                    {
                        "count":"*"
                    },
                    1,
                    2
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Give the ids of documents that have between one and two paragraphs.",
        "SQL":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "SQL_parse":{
            "select":{
                "value":"document_id"
            },
            "from":"Paragraphs",
            "groupby":{
                "value":"document_id"
            },
            "having":{
                "between":[
                    {
                        "count":"*"
                    },
                    1,
                    2
                ]
            }
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "SQL":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"document_id"
                    },
                    "from":"Paragraphs",
                    "where":{
                        "eq":[
                            "paragraph_text",
                            {
                                "literal":"Brazil"
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"document_id"
                    },
                    "from":"Paragraphs",
                    "where":{
                        "eq":[
                            "paragraph_text",
                            {
                                "literal":"Ireland"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"cre_Doc_Template_Mgt",
        "question":"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "SQL":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"document_id"
                    },
                    "from":"Paragraphs",
                    "where":{
                        "eq":[
                            "paragraph_text",
                            {
                                "literal":"Brazil"
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"document_id"
                    },
                    "from":"Paragraphs",
                    "where":{
                        "eq":[
                            "paragraph_text",
                            {
                                "literal":"Ireland"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"course_teach",
        "question":"How many teachers are there?",
        "SQL":"SELECT count(*) FROM teacher",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"teacher"
        }
    },
    {
        "db_id":"course_teach",
        "question":"What is the total count of teachers?",
        "SQL":"SELECT count(*) FROM teacher",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"teacher"
        }
    },
    {
        "db_id":"course_teach",
        "question":"List the names of teachers in ascending order of age.",
        "SQL":"SELECT Name FROM teacher ORDER BY Age ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers ordered by ascending age?",
        "SQL":"SELECT Name FROM teacher ORDER BY Age ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the age and hometown of teachers?",
        "SQL":"SELECT Age ,  Hometown FROM teacher",
        "SQL_parse":{
            "select":[
                {
                    "value":"Age"
                },
                {
                    "value":"Hometown"
                }
            ],
            "from":"teacher"
        }
    },
    {
        "db_id":"course_teach",
        "question":"What is the age and hometown of every teacher?",
        "SQL":"SELECT Age ,  Hometown FROM teacher",
        "SQL_parse":{
            "select":[
                {
                    "value":"Age"
                },
                {
                    "value":"Hometown"
                }
            ],
            "from":"teacher"
        }
    },
    {
        "db_id":"course_teach",
        "question":"List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "SQL":"select name from teacher where hometown != \"little lever urban district\"",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"teacher",
            "where":{
                "neq":[
                    "hometown",
                    "little lever urban district"
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "SQL":"select name from teacher where hometown != \"little lever urban district\"",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"teacher",
            "where":{
                "neq":[
                    "hometown",
                    "little lever urban district"
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show the name of teachers aged either 32 or 33?",
        "SQL":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Age",
                            32
                        ]
                    },
                    {
                        "eq":[
                            "Age",
                            33
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers who are aged either 32 or 33?",
        "SQL":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Age",
                            32
                        ]
                    },
                    {
                        "eq":[
                            "Age",
                            33
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What is the hometown of the youngest teacher?",
        "SQL":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"course_teach",
        "question":"Where is the youngest teacher from?",
        "SQL":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show different hometown of teachers and the number of teachers from each hometown.",
        "SQL":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "SQL_parse":{
            "select":[
                {
                    "value":"Hometown"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"For each hometown, how many teachers are there?",
        "SQL":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "SQL_parse":{
            "select":[
                {
                    "value":"Hometown"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"List the most common hometown of teachers.",
        "SQL":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"course_teach",
        "question":"What is the most commmon hometowns for teachers?",
        "SQL":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show the hometowns shared by at least two teachers.",
        "SQL":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the towns from which at least two teachers come from?",
        "SQL":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"Hometown"
            },
            "from":"teacher",
            "groupby":{
                "value":"Hometown"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show names of teachers and the courses they are arranged to teach.",
        "SQL":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T3.Name"
                },
                {
                    "value":"T2.Course"
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"course_teach",
        "question":"What is the name of each teacher and what course they teach?",
        "SQL":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T3.Name"
                },
                {
                    "value":"T2.Course"
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "SQL":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T3.Name"
                },
                {
                    "value":"T2.Course"
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T3.Name"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "SQL":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T3.Name"
                },
                {
                    "value":"T2.Course"
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T3.Name"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show the name of the teacher for the math course.",
        "SQL":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "SQL_parse":{
            "select":{
                "value":"T3.Name"
            },
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Course",
                    "Math"
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the people who teach math courses?",
        "SQL":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "SQL_parse":{
            "select":{
                "value":"T3.Name"
            },
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"course",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Course_ID",
                            "T2.Course_ID"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T3.Teacher_ID"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Course",
                    "Math"
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show names of teachers and the number of courses they teach.",
        "SQL":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T2.Teacher_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Name"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers and how many courses do they teach?",
        "SQL":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T2.Teacher_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Name"
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"Show names of teachers that teach at least two courses.",
        "SQL":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.Name"
            },
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T2.Teacher_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Name"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers who teach at least two courses?",
        "SQL":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.Name"
            },
            "from":[
                {
                    "value":"course_arrange",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"teacher",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Teacher_ID",
                            "T2.Teacher_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Name"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"List the names of teachers who have not been arranged to teach courses.",
        "SQL":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "where":{
                "nin":[
                    "Teacher_id",
                    {
                        "select":{
                            "value":"Teacher_id"
                        },
                        "from":"course_arrange"
                    }
                ]
            }
        }
    },
    {
        "db_id":"course_teach",
        "question":"What are the names of the teachers whose courses have not been arranged?",
        "SQL":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"teacher",
            "where":{
                "nin":[
                    "Teacher_id",
                    {
                        "select":{
                            "value":"Teacher_id"
                        },
                        "from":"course_arrange"
                    }
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"How many visitors below age 30 are there?",
        "SQL":"SELECT count(*) FROM visitor WHERE age  <  30",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"visitor",
            "where":{
                "lt":[
                    "age",
                    30
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "SQL":"SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"visitor",
            "where":{
                "gt":[
                    "Level_of_membership",
                    4
                ]
            },
            "orderby":{
                "value":"Level_of_membership",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What is the average age of the visitors whose membership level is not higher than 4?",
        "SQL":"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"visitor",
            "where":{
                "lte":[
                    "Level_of_membership",
                    4
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "SQL":"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"Level_of_membership"
                }
            ],
            "from":"visitor",
            "where":{
                "gt":[
                    "Level_of_membership",
                    4
                ]
            },
            "orderby":{
                "value":"age",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the id and name of the museum that has the most staff members?",
        "SQL":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"museum_id"
                },
                {
                    "value":"name"
                }
            ],
            "from":"museum",
            "orderby":{
                "value":"num_of_staff",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the average number of staff working for the museums that were open before 2009.",
        "SQL":"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"num_of_staff"
                }
            },
            "from":"museum",
            "where":{
                "lt":[
                    "open_year",
                    2009
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What are the opening year and staff number of the museum named Plaza Museum?",
        "SQL":"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "SQL_parse":{
            "select":[
                {
                    "value":"Num_of_Staff"
                },
                {
                    "value":"Open_Year"
                }
            ],
            "from":"museum",
            "where":{
                "eq":[
                    "name",
                    {
                        "literal":"Plaza Museum"
                    }
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "SQL":"SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"museum",
            "where":{
                "gt":[
                    "num_of_staff",
                    {
                        "select":{
                            "value":{
                                "min":"num_of_staff"
                            }
                        },
                        "from":"museum",
                        "where":{
                            "gt":[
                                "open_year",
                                2010
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"find the id, name and age for visitors who visited some museums more than once.",
        "SQL":"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t1.id"
                },
                {
                    "value":"t1.name"
                },
                {
                    "value":"t1.age"
                }
            ],
            "from":[
                {
                    "value":"visitor",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"visit",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.id",
                            "t2.visitor_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.id"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "SQL":"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.visitor_id"
                },
                {
                    "value":"t1.name"
                },
                {
                    "value":"t1.Level_of_membership"
                }
            ],
            "from":[
                {
                    "value":"visitor",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"visit",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.id",
                            "t2.visitor_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.visitor_id"
            },
            "orderby":{
                "value":{
                    "sum":"t2.Total_spent"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What are the id and name of the museum visited most times?",
        "SQL":"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.Museum_ID"
                },
                {
                    "value":"t1.name"
                }
            ],
            "from":[
                {
                    "value":"museum",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"visit",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.Museum_ID",
                            "t2.Museum_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t2.Museum_ID"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What is the name of the museum that had no visitor yet?",
        "SQL":"SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"museum",
            "where":{
                "nin":[
                    "Museum_ID",
                    {
                        "select":{
                            "value":"museum_id"
                        },
                        "from":"visit"
                    }
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the name and age of the visitor who bought the most tickets at once.",
        "SQL":"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t1.name"
                },
                {
                    "value":"t1.age"
                }
            ],
            "from":[
                {
                    "value":"visitor",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"visit",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.id",
                            "t2.visitor_id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"t2.num_of_ticket",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What are the average and maximum number of tickets bought in all visits?",
        "SQL":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"num_of_ticket"
                    }
                },
                {
                    "value":{
                        "max":"num_of_ticket"
                    }
                }
            ],
            "from":"visit"
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What is the total ticket expense of the visitors whose membership level is 1?",
        "SQL":"SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"t2.Total_spent"
                }
            },
            "from":[
                {
                    "value":"visitor",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"visit",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.id",
                            "t2.visitor_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "t1.Level_of_membership",
                    1
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "SQL":"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"t1.name"
                    },
                    "from":[
                        {
                            "value":"visitor",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"visit",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.id",
                                    "t2.visitor_id"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"museum",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t3.Museum_ID",
                                    "t2.Museum_ID"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "lt":[
                            "t3.open_year",
                            2009
                        ]
                    }
                },
                {
                    "select":{
                        "value":"t1.name"
                    },
                    "from":[
                        {
                            "value":"visitor",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"visit",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.id",
                                    "t2.visitor_id"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"museum",
                                "name":"t3"
                            },
                            "on":{
                                "eq":[
                                    "t3.Museum_ID",
                                    "t2.Museum_ID"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "gt":[
                            "t3.open_year",
                            2011
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"museum_visit",
        "question":"Find the number of visitors who did not visit any museum opened after 2010.",
        "SQL":"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"visitor",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"t2.visitor_id"
                        },
                        "from":[
                            {
                                "value":"museum",
                                "name":"t1"
                            },
                            {
                                "join":{
                                    "value":"visit",
                                    "name":"t2"
                                },
                                "on":{
                                    "eq":[
                                        "t1.Museum_ID",
                                        "t2.Museum_ID"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "gt":[
                                "t1.open_year",
                                2010
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"museum_visit",
        "question":"How many museums were opened after 2013 or before 2008?",
        "SQL":"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"museum",
            "where":{
                "or":[
                    {
                        "gt":[
                            "open_year",
                            2013
                        ]
                    },
                    {
                        "lt":[
                            "open_year",
                            2008
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the total number of players.",
        "SQL":"SELECT count(*) FROM players",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"players"
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many players are there?",
        "SQL":"SELECT count(*) FROM players",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"players"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the total number of matches.",
        "SQL":"SELECT count(*) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Count the number of matches.",
        "SQL":"SELECT count(*) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"List the first name and birth date of all players from the country with code USA.",
        "SQL":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"birth_date"
                }
            ],
            "from":"players",
            "where":{
                "eq":[
                    "country_code",
                    {
                        "literal":"USA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the first names and birth dates of players from the USA?",
        "SQL":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"birth_date"
                }
            ],
            "from":"players",
            "where":{
                "eq":[
                    "country_code",
                    {
                        "literal":"USA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the average age of losers and winners of all matches.",
        "SQL":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"loser_age"
                    }
                },
                {
                    "value":{
                        "avg":"winner_age"
                    }
                }
            ],
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the average ages of losers and winners across matches?",
        "SQL":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"loser_age"
                    }
                },
                {
                    "value":{
                        "avg":"winner_age"
                    }
                }
            ],
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the average rank of winners in all matches.",
        "SQL":"SELECT avg(winner_rank) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"winner_rank"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the average rank for winners in all matches?",
        "SQL":"SELECT avg(winner_rank) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"winner_rank"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the highest rank of losers in all matches.",
        "SQL":"SELECT min(loser_rank) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"loser_rank"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the best rank of losers across all matches?",
        "SQL":"SELECT min(loser_rank) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"loser_rank"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"find the number of distinct country codes of all players.",
        "SQL":"SELECT count(DISTINCT country_code) FROM players",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"country_code"
                }
            },
            "from":"players"
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many distinct countries do players come from?",
        "SQL":"SELECT count(DISTINCT country_code) FROM players",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"country_code"
                }
            },
            "from":"players"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the number of distinct name of losers.",
        "SQL":"SELECT count(DISTINCT loser_name) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"loser_name"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many different loser names are there?",
        "SQL":"SELECT count(DISTINCT loser_name) FROM matches",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"loser_name"
                }
            },
            "from":"matches"
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the name of tourney that has more than 10 matches.",
        "SQL":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "SQL_parse":{
            "select":{
                "value":"tourney_name"
            },
            "from":"matches",
            "groupby":{
                "value":"tourney_name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    10
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the names of tournaments that have more than 10 matches?",
        "SQL":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "SQL_parse":{
            "select":{
                "value":"tourney_name"
            },
            "from":"matches",
            "groupby":{
                "value":"tourney_name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    10
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"List the names of all winners who played in both 2013 and 2016.",
        "SQL":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"winner_name"
                    },
                    "from":"matches",
                    "where":{
                        "eq":[
                            "YEAR",
                            2013
                        ]
                    }
                },
                {
                    "select":{
                        "value":"winner_name"
                    },
                    "from":"matches",
                    "where":{
                        "eq":[
                            "YEAR",
                            2016
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the names of players who won in both 2013 and 2016?",
        "SQL":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"winner_name"
                    },
                    "from":"matches",
                    "where":{
                        "eq":[
                            "YEAR",
                            2013
                        ]
                    }
                },
                {
                    "select":{
                        "value":"winner_name"
                    },
                    "from":"matches",
                    "where":{
                        "eq":[
                            "YEAR",
                            2016
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"wta_1",
        "question":"List the number of all matches who played in years of 2013 or 2016.",
        "SQL":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"matches",
            "where":{
                "or":[
                    {
                        "eq":[
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq":[
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many matches were played in 2013 or 2016?",
        "SQL":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"matches",
            "where":{
                "or":[
                    {
                        "eq":[
                            "YEAR",
                            2013
                        ]
                    },
                    {
                        "eq":[
                            "YEAR",
                            2016
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "SQL":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.country_code"
                        },
                        {
                            "value":"T1.first_name"
                        }
                    ],
                    "from":[
                        {
                            "value":"players",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"matches",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.player_id",
                                    "T2.winner_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.tourney_name",
                            {
                                "literal":"WTA Championships"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.country_code"
                        },
                        {
                            "value":"T1.first_name"
                        }
                    ],
                    "from":[
                        {
                            "value":"players",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"matches",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.player_id",
                                    "T2.winner_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.tourney_name",
                            {
                                "literal":"Australian Open"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "SQL":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.country_code"
                        },
                        {
                            "value":"T1.first_name"
                        }
                    ],
                    "from":[
                        {
                            "value":"players",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"matches",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.player_id",
                                    "T2.winner_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.tourney_name",
                            {
                                "literal":"WTA Championships"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.country_code"
                        },
                        {
                            "value":"T1.first_name"
                        }
                    ],
                    "from":[
                        {
                            "value":"players",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"matches",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.player_id",
                                    "T2.winner_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.tourney_name",
                            {
                                "literal":"Australian Open"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the first name and country code of the oldest player.",
        "SQL":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"country_code"
                }
            ],
            "from":"players",
            "orderby":{
                "value":"birth_date"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the first name and country code of the oldest player?",
        "SQL":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"country_code"
                }
            ],
            "from":"players",
            "orderby":{
                "value":"birth_date"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"List the first and last name of all players in the order of birth date.",
        "SQL":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"players",
            "orderby":{
                "value":"birth_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the full names of all players, sorted by birth date?",
        "SQL":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"players",
            "orderby":{
                "value":"birth_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"List the first and last name of all players who are left \/ L hand in the order of birth date.",
        "SQL":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"players",
            "where":{
                "eq":[
                    "hand",
                    {
                        "literal":"L"
                    }
                ]
            },
            "orderby":{
                "value":"birth_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the full names of all left handed players, in order of birth date?",
        "SQL":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"players",
            "where":{
                "eq":[
                    "hand",
                    {
                        "literal":"L"
                    }
                ]
            },
            "orderby":{
                "value":"birth_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the first name and country code of the player who did the most number of tours.",
        "SQL":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.country_code"
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.tours",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the first name and country code of the player with the most tours?",
        "SQL":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.country_code"
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.tours",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the year that has the most number of matches.",
        "SQL":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"YEAR"
            },
            "from":"matches",
            "groupby":{
                "value":"YEAR"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Which year had the most matches?",
        "SQL":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"YEAR"
            },
            "from":"matches",
            "groupby":{
                "value":"YEAR"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the name and rank points of the winner who won the most times.",
        "SQL":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"winner_rank_points"
                }
            ],
            "from":"matches",
            "groupby":{
                "value":"winner_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "SQL":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"winner_rank_points"
                }
            ],
            "from":"matches",
            "groupby":{
                "value":"winner_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "SQL":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"winner_name"
            },
            "from":"matches",
            "where":{
                "eq":[
                    "tourney_name",
                    {
                        "literal":"Australian Open"
                    }
                ]
            },
            "orderby":{
                "value":"winner_rank_points",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "SQL":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"winner_name"
            },
            "from":"matches",
            "where":{
                "eq":[
                    "tourney_name",
                    {
                        "literal":"Australian Open"
                    }
                ]
            },
            "orderby":{
                "value":"winner_rank_points",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"find the names of loser and winner who played in the match with greatest number of minutes.",
        "SQL":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"loser_name"
                }
            ],
            "from":"matches",
            "orderby":{
                "value":"minutes",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the names of the winner and loser who played in the longest match?",
        "SQL":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"loser_name"
                }
            ],
            "from":"matches",
            "orderby":{
                "value":"minutes",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the average ranking for each player and their first name.",
        "SQL":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"ranking"
                    }
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.first_name"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the first names of all players, and their average rankings?",
        "SQL":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"ranking"
                    }
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.first_name"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the total ranking points for each player and their first name.",
        "SQL":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"ranking_points"
                    }
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.first_name"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the first names of all players, and their total ranking points?",
        "SQL":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"ranking_points"
                    }
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"rankings",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.player_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.first_name"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"find the number of players for each country.",
        "SQL":"SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"country_code"
                }
            ],
            "from":"players",
            "groupby":{
                "value":"country_code"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many players are from each country?",
        "SQL":"SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"country_code"
                }
            ],
            "from":"players",
            "groupby":{
                "value":"country_code"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"find the code of the country where has the greatest number of players.",
        "SQL":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"country_code"
            },
            "from":"players",
            "groupby":{
                "value":"country_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the code of the country with the most players?",
        "SQL":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"country_code"
            },
            "from":"players",
            "groupby":{
                "value":"country_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the codes of countries that have more than 50 players.",
        "SQL":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "SQL_parse":{
            "select":{
                "value":"country_code"
            },
            "from":"players",
            "groupby":{
                "value":"country_code"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    50
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the codes of countries with more than 50 players?",
        "SQL":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "SQL_parse":{
            "select":{
                "value":"country_code"
            },
            "from":"players",
            "groupby":{
                "value":"country_code"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    50
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the total number of tours for each ranking date.",
        "SQL":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"tours"
                    }
                },
                {
                    "value":"ranking_date"
                }
            ],
            "from":"rankings",
            "groupby":{
                "value":"ranking_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many total tours were there for each ranking date?",
        "SQL":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"tours"
                    }
                },
                {
                    "value":"ranking_date"
                }
            ],
            "from":"rankings",
            "groupby":{
                "value":"ranking_date"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the number of matches happened in each year.",
        "SQL":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"YEAR"
                }
            ],
            "from":"matches",
            "groupby":{
                "value":"YEAR"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many matches were played in each year?",
        "SQL":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"YEAR"
                }
            ],
            "from":"matches",
            "groupby":{
                "value":"YEAR"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the name and rank of the 3 youngest winners across all matches.",
        "SQL":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"winner_rank"
                }
            ],
            "from":"matches",
            "orderby":{
                "value":"winner_age"
            },
            "limit":3
        }
    },
    {
        "db_id":"wta_1",
        "question":"What are the names and ranks of the three youngest winners across all matches?",
        "SQL":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"winner_name"
                },
                {
                    "value":"winner_rank"
                }
            ],
            "from":"matches",
            "orderby":{
                "value":"winner_age"
            },
            "limit":3
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many different winners both participated in the WTA Championships and were left handed?",
        "SQL":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"winner_name"
                }
            },
            "from":"matches",
            "where":{
                "and":[
                    {
                        "eq":[
                            "tourney_name",
                            {
                                "literal":"WTA Championships"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "winner_hand",
                            {
                                "literal":"L"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the number of left handed winners who participated in the WTA Championships.",
        "SQL":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"winner_name"
                }
            },
            "from":"matches",
            "where":{
                "and":[
                    {
                        "eq":[
                            "tourney_name",
                            {
                                "literal":"WTA Championships"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "winner_hand",
                            {
                                "literal":"L"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "SQL":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.country_code"
                },
                {
                    "value":"T1.birth_date"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"matches",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.winner_id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.winner_rank_points",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "SQL":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.country_code"
                },
                {
                    "value":"T1.birth_date"
                }
            ],
            "from":[
                {
                    "value":"players",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"matches",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.player_id",
                            "T2.winner_id"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.winner_rank_points",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"wta_1",
        "question":"Find the number of players for each hand type.",
        "SQL":"SELECT count(*) ,  hand FROM players GROUP BY hand",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"hand"
                }
            ],
            "from":"players",
            "groupby":{
                "value":"hand"
            }
        }
    },
    {
        "db_id":"wta_1",
        "question":"How many players are there for each hand type?",
        "SQL":"SELECT count(*) ,  hand FROM players GROUP BY hand",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"hand"
                }
            ],
            "from":"players",
            "groupby":{
                "value":"hand"
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"How many ships ended up being 'Captured'?",
        "SQL":"SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"ship",
            "where":{
                "eq":[
                    "disposition_of_ship",
                    {
                        "literal":"Captured"
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"List the name and tonnage ordered by in descending alphaetical order for the names.",
        "SQL":"SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"tonnage"
                }
            ],
            "from":"ship",
            "orderby":{
                "value":"name",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"List the name, date and result of each battle.",
        "SQL":"SELECT name ,  date FROM battle",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"date"
                }
            ],
            "from":"battle"
        }
    },
    {
        "db_id":"battle_death",
        "question":"What is maximum and minimum death toll caused each time?",
        "SQL":"SELECT max(killed) ,  min(killed) FROM death",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"killed"
                    }
                },
                {
                    "value":{
                        "min":"killed"
                    }
                }
            ],
            "from":"death"
        }
    },
    {
        "db_id":"battle_death",
        "question":"What is the average number of injuries caused each time?",
        "SQL":"SELECT avg(injured) FROM death",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"injured"
                }
            },
            "from":"death"
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the death and injury situations caused by the ship with tonnage 't'?",
        "SQL":"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.killed"
                },
                {
                    "value":"T1.injured"
                }
            ],
            "from":[
                {
                    "value":"death",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"ship",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "T1.caused_by_ship_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.tonnage",
                    {
                        "literal":"t"
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "SQL":"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"RESULT"
                }
            ],
            "from":"battle",
            "where":{
                "neq":[
                    "bulgarian_commander",
                    {
                        "literal":"Boril"
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "SQL":"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.id"
                },
                {
                    "value":"T1.name"
                }
            ],
            "from":[
                {
                    "value":"battle",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"ship",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.lost_in_battle"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.ship_type",
                    {
                        "literal":"Brig"
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the ids and names of the battles that led to more than 10 people killed in total.",
        "SQL":"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.id"
                },
                {
                    "value":"T1.name"
                }
            ],
            "from":[
                {
                    "value":"battle",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"ship",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.lost_in_battle"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"death",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.id",
                            "T3.caused_by_ship_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.id"
            },
            "having":{
                "gt":[
                    {
                        "sum":"T3.killed"
                    },
                    10
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"What is the ship id and name that caused most total injuries?",
        "SQL":"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.id"
                },
                {
                    "value":"T2.name"
                }
            ],
            "from":[
                {
                    "value":"death",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"ship",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "T1.caused_by_ship_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "SQL":"SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"battle",
            "where":{
                "and":[
                    {
                        "eq":[
                            "bulgarian_commander",
                            {
                                "literal":"Kaloyan"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "latin_commander",
                            {
                                "literal":"Baldwin I"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"How many different results are there for the battles?",
        "SQL":"SELECT count(DISTINCT RESULT) FROM battle",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"RESULT"
                }
            },
            "from":"battle"
        }
    },
    {
        "db_id":"battle_death",
        "question":"How many battles did not lose any ship with tonnage '225'?",
        "SQL":"SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"battle",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"lost_in_battle"
                        },
                        "from":"ship",
                        "where":{
                            "eq":[
                                "tonnage",
                                {
                                    "literal":"225"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"battle_death",
        "question":"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "SQL":"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.name"
                        },
                        {
                            "value":"T1.date"
                        }
                    ],
                    "from":[
                        {
                            "value":"battle",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"ship",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.lost_in_battle"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.name",
                            {
                                "literal":"Lettice"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.name"
                        },
                        {
                            "value":"T1.date"
                        }
                    ],
                    "from":[
                        {
                            "value":"battle",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"ship",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.lost_in_battle"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.name",
                            {
                                "literal":"HMS Atalanta"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"battle_death",
        "question":"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "SQL":"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "SQL_parse":{
            "except":[
                {
                    "select":[
                        {
                            "value":"name"
                        },
                        {
                            "value":"RESULT"
                        },
                        {
                            "value":"bulgarian_commander"
                        }
                    ],
                    "from":"battle"
                },
                {
                    "select":[
                        {
                            "value":"T1.name"
                        },
                        {
                            "value":"T1.result"
                        },
                        {
                            "value":"T1.bulgarian_commander"
                        }
                    ],
                    "from":[
                        {
                            "value":"battle",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"ship",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.lost_in_battle"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.location",
                            {
                                "literal":"English Channel"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"battle_death",
        "question":"What are the notes of the death events which has substring 'East'?",
        "SQL":"SELECT note FROM death WHERE note LIKE '%East%'",
        "SQL_parse":{
            "select":{
                "value":"note"
            },
            "from":"death",
            "where":{
                "like":[
                    "note",
                    {
                        "literal":"%East%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"what are all the addresses including line 1 and line 2?",
        "SQL":"SELECT line_1 ,  line_2 FROM addresses",
        "SQL_parse":{
            "select":[
                {
                    "value":"line_1"
                },
                {
                    "value":"line_2"
                }
            ],
            "from":"addresses"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the first and second line for all addresses?",
        "SQL":"SELECT line_1 ,  line_2 FROM addresses",
        "SQL_parse":{
            "select":[
                {
                    "value":"line_1"
                },
                {
                    "value":"line_2"
                }
            ],
            "from":"addresses"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many courses in total are listed?",
        "SQL":"SELECT count(*) FROM Courses",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Courses"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many courses are there?",
        "SQL":"SELECT count(*) FROM Courses",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Courses"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How is the math course described?",
        "SQL":"SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "SQL_parse":{
            "select":{
                "value":"course_description"
            },
            "from":"Courses",
            "where":{
                "eq":[
                    "course_name",
                    {
                        "literal":"math"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the descriptions for all the math courses?",
        "SQL":"SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "SQL_parse":{
            "select":{
                "value":"course_description"
            },
            "from":"Courses",
            "where":{
                "eq":[
                    "course_name",
                    {
                        "literal":"math"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the zip code of the address in the city Port Chelsea?",
        "SQL":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "SQL_parse":{
            "select":{
                "value":"zip_postcode"
            },
            "from":"Addresses",
            "where":{
                "eq":[
                    "city",
                    {
                        "literal":"Port Chelsea"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the zip code for Port Chelsea?",
        "SQL":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "SQL_parse":{
            "select":{
                "value":"zip_postcode"
            },
            "from":"Addresses",
            "where":{
                "eq":[
                    "city",
                    {
                        "literal":"Port Chelsea"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Which department offers the most number of degrees? List department name and id.",
        "SQL":"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.department_name"
                },
                {
                    "value":"T1.department_id"
                }
            ],
            "from":[
                {
                    "value":"Degree_Programs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Departments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.department_id",
                            "T2.department_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.department_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the name and id of the department with the most number of degrees ?",
        "SQL":"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"t2.department_name"
                },
                {
                    "value":"t1.department_id"
                }
            ],
            "from":[
                {
                    "value":"degree_programs",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"departments",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.department_id",
                            "t2.department_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"t1.department_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many departments offer any degree?",
        "SQL":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"department_id"
                }
            },
            "from":"Degree_Programs"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many different departments offer degrees?",
        "SQL":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"department_id"
                }
            },
            "from":"Degree_Programs"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many different degree names are offered?",
        "SQL":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"degree_summary_name"
                }
            },
            "from":"Degree_Programs"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many different degrees are offered?",
        "SQL":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"degree_summary_name"
                }
            },
            "from":"Degree_Programs"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many degrees does the engineering department offer?",
        "SQL":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Departments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Degree_Programs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.department_id",
                            "T2.department_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.department_name",
                    {
                        "literal":"engineer"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many degrees does the engineering department have?",
        "SQL":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Departments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Degree_Programs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.department_id",
                            "T2.department_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.department_name",
                    {
                        "literal":"engineer"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names and descriptions of all the sections?",
        "SQL":"SELECT section_name ,  section_description FROM Sections",
        "SQL_parse":{
            "select":[
                {
                    "value":"section_name"
                },
                {
                    "value":"section_description"
                }
            ],
            "from":"Sections"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names and descriptions for all the sections?",
        "SQL":"SELECT section_name ,  section_description FROM Sections",
        "SQL_parse":{
            "select":[
                {
                    "value":"section_name"
                },
                {
                    "value":"section_description"
                }
            ],
            "from":"Sections"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names and id of courses having at most 2 sections?",
        "SQL":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.course_name"
                },
                {
                    "value":"T1.course_id"
                }
            ],
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Sections",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.course_id"
            },
            "having":{
                "lte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names and ids of every course with less than 2 sections?",
        "SQL":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.course_name"
                },
                {
                    "value":"T1.course_id"
                }
            ],
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Sections",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.course_id"
            },
            "having":{
                "lte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"List the section_name in reversed lexicographical order.",
        "SQL":"SELECT section_name FROM Sections ORDER BY section_name DESC",
        "SQL_parse":{
            "select":{
                "value":"section_name"
            },
            "from":"Sections",
            "orderby":{
                "value":"section_name",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names of the sections in reverse alphabetical order?",
        "SQL":"SELECT section_name FROM Sections ORDER BY section_name DESC",
        "SQL_parse":{
            "select":{
                "value":"section_name"
            },
            "from":"Sections",
            "orderby":{
                "value":"section_name",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the semester which most student registered in? Show both the name and the id.",
        "SQL":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.semester_name"
                },
                {
                    "value":"T1.semester_id"
                }
            ],
            "from":[
                {
                    "value":"Semesters",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.semester_id",
                            "T2.semester_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.semester_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"For each semester, what is the name and id of the one with the most students registered?",
        "SQL":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.semester_name"
                },
                {
                    "value":"T1.semester_id"
                }
            ],
            "from":[
                {
                    "value":"Semesters",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.semester_id",
                            "T2.semester_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.semester_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the description of the department whose name has the substring the computer?",
        "SQL":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "SQL_parse":{
            "select":{
                "value":"department_description"
            },
            "from":"Departments",
            "where":{
                "like":[
                    "department_name",
                    {
                        "literal":"%computer%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the department description for the one whose name has the word computer?",
        "SQL":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "SQL_parse":{
            "select":{
                "value":"department_description"
            },
            "from":"Departments",
            "where":{
                "like":[
                    "department_name",
                    {
                        "literal":"%computer%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "SQL":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":"T1.student_id"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "eq":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "SQL":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":"T1.student_id"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "eq":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "SQL":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Degree_Programs",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.degree_program_id",
                            "T3.degree_program_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.degree_summary_name",
                    {
                        "literal":"Bachelor"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "SQL":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Degree_Programs",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.degree_program_id",
                            "T3.degree_program_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T3.degree_summary_name",
                    {
                        "literal":"Bachelor"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Find the kind of program which most number of students are enrolled in?",
        "SQL":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.degree_summary_name"
            },
            "from":[
                {
                    "value":"Degree_Programs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.degree_program_id",
                            "T2.degree_program_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.degree_summary_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the degree summary name that has the most number of students enrolled?",
        "SQL":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.degree_summary_name"
            },
            "from":[
                {
                    "value":"Degree_Programs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.degree_program_id",
                            "T2.degree_program_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.degree_summary_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Find the program which most number of students are enrolled in. List both the id and the summary.",
        "SQL":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.degree_program_id"
                },
                {
                    "value":"T1.degree_summary_name"
                }
            ],
            "from":[
                {
                    "value":"Degree_Programs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.degree_program_id",
                            "T2.degree_program_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.degree_program_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the program id and the summary of the degree that has the most students enrolled?",
        "SQL":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.degree_program_id"
                },
                {
                    "value":"T1.degree_summary_name"
                }
            ],
            "from":[
                {
                    "value":"Degree_Programs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.degree_program_id",
                            "T2.degree_program_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.degree_program_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "SQL":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.student_id"
                },
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"T1.student_id"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "SQL":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.student_id"
                },
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.middle_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"T1.student_id"
                }
            ],
            "from":[
                {
                    "value":"Students",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.student_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Which semesters do not have any student enrolled? List the semester name.",
        "SQL":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "SQL_parse":{
            "select":{
                "value":"semester_name"
            },
            "from":"Semesters",
            "where":{
                "nin":[
                    "semester_id",
                    {
                        "select":{
                            "value":"semester_id"
                        },
                        "from":"Student_Enrolment"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the name of the semester with no students enrolled?",
        "SQL":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "SQL_parse":{
            "select":{
                "value":"semester_name"
            },
            "from":"Semesters",
            "where":{
                "nin":[
                    "semester_id",
                    {
                        "select":{
                            "value":"semester_id"
                        },
                        "from":"Student_Enrolment"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are all the course names of the courses which ever have students enrolled in?",
        "SQL":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.course_name"
            },
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment_Courses",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the names of all courses that have some students enrolled?",
        "SQL":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.course_name"
            },
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment_Courses",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What's the name of the course with most number of enrollments?",
        "SQL":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.course_name"
            },
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment_Courses",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.course_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the name of the course with the most students enrolled?",
        "SQL":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.course_name"
            },
            "from":[
                {
                    "value":"Courses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Student_Enrolment_Courses",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.course_id",
                            "T2.course_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.course_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "SQL":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"T1.last_name"
                    },
                    "from":[
                        {
                            "value":"Students",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Addresses",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.current_address_id",
                                    "T2.address_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.state_province_county",
                            {
                                "literal":"NorthCarolina"
                            }
                        ]
                    }
                },
                {
                    "select_distinct":{
                        "value":"T3.last_name"
                    },
                    "from":[
                        {
                            "value":"Students",
                            "name":"T3"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T4"
                            },
                            "on":{
                                "eq":[
                                    "T3.student_id",
                                    "T4.student_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "SQL":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"T1.last_name"
                    },
                    "from":[
                        {
                            "value":"Students",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Addresses",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.current_address_id",
                                    "T2.address_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.state_province_county",
                            {
                                "literal":"NorthCarolina"
                            }
                        ]
                    }
                },
                {
                    "select_distinct":{
                        "value":"T3.last_name"
                    },
                    "from":[
                        {
                            "value":"Students",
                            "name":"T3"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T4"
                            },
                            "on":{
                                "eq":[
                                    "T3.student_id",
                                    "T4.student_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Show the date and id of the transcript with at least 2 course results.",
        "SQL":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.transcript_date"
                },
                {
                    "value":"T1.transcript_id"
                }
            ],
            "from":[
                {
                    "value":"Transcript_Contents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Transcripts",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.transcript_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the date and id of the transcript with at least 2 courses listed?",
        "SQL":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.transcript_date"
                },
                {
                    "value":"T1.transcript_id"
                }
            ],
            "from":[
                {
                    "value":"Transcript_Contents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Transcripts",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.transcript_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "SQL":"SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "SQL_parse":{
            "select":{
                "value":"cell_mobile_number"
            },
            "from":"Students",
            "where":{
                "and":[
                    {
                        "eq":[
                            "first_name",
                            {
                                "literal":"Timmothy"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "last_name",
                            {
                                "literal":"Ward"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the mobile phone number of the student named Timmothy Ward ?",
        "SQL":"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "SQL_parse":{
            "select":{
                "value":"cell_mobile_number"
            },
            "from":"students",
            "where":{
                "and":[
                    {
                        "eq":[
                            "first_name",
                            {
                                "literal":"timmothy"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "last_name",
                            {
                                "literal":"ward"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Who is the first student to register? List the first name, middle name and last name.",
        "SQL":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"middle_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"Students",
            "orderby":{
                "value":"date_first_registered",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the first, middle, and last name of the first student to register?",
        "SQL":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"middle_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"Students",
            "orderby":{
                "value":"date_first_registered",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "SQL":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"middle_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"Students",
            "orderby":{
                "value":"date_left",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the first, middle, and last name of the earliest school graduate?",
        "SQL":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"middle_name"
                },
                {
                    "value":"last_name"
                }
            ],
            "from":"Students",
            "orderby":{
                "value":"date_left",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Whose permanent address is different from his or her current address? List his or her first name.",
        "SQL":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "SQL_parse":{
            "select":{
                "value":"first_name"
            },
            "from":"Students",
            "where":{
                "neq":[
                    "current_address_id",
                    "permanent_address_id"
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the first name of the student whose permanent address is different from his or her current one?",
        "SQL":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "SQL_parse":{
            "select":{
                "value":"first_name"
            },
            "from":"Students",
            "where":{
                "neq":[
                    "current_address_id",
                    "permanent_address_id"
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Which address holds the most number of students currently? List the address id and all lines.",
        "SQL":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.address_id"
                },
                {
                    "value":"T1.line_1"
                },
                {
                    "value":"T1.line_2"
                }
            ],
            "from":[
                {
                    "value":"Addresses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Students",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.address_id",
                            "T2.current_address_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.address_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the id, line 1, and line 2 of the address with the most students?",
        "SQL":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.address_id"
                },
                {
                    "value":"T1.line_1"
                },
                {
                    "value":"T1.line_2"
                }
            ],
            "from":[
                {
                    "value":"Addresses",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Students",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.address_id",
                            "T2.current_address_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.address_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"On average, when were the transcripts printed?",
        "SQL":"SELECT avg(transcript_date) FROM Transcripts",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"transcript_date"
                }
            },
            "from":"Transcripts"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the average transcript date?",
        "SQL":"SELECT avg(transcript_date) FROM Transcripts",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"transcript_date"
                }
            },
            "from":"Transcripts"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"When is the first transcript released? List the date and details.",
        "SQL":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"transcript_date"
                },
                {
                    "value":"other_details"
                }
            ],
            "from":"Transcripts",
            "orderby":{
                "value":"transcript_date",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the earliest date of a transcript release, and what details can you tell me?",
        "SQL":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"transcript_date"
                },
                {
                    "value":"other_details"
                }
            ],
            "from":"Transcripts",
            "orderby":{
                "value":"transcript_date",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many transcripts are released?",
        "SQL":"SELECT count(*) FROM Transcripts",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Transcripts"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many transcripts are listed?",
        "SQL":"SELECT count(*) FROM Transcripts",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Transcripts"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the last transcript release date?",
        "SQL":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"transcript_date"
            },
            "from":"Transcripts",
            "orderby":{
                "value":"transcript_date",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"When was the last transcript released?",
        "SQL":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"transcript_date"
            },
            "from":"Transcripts",
            "orderby":{
                "value":"transcript_date",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "SQL":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"student_course_id"
                }
            ],
            "from":"Transcript_Contents",
            "groupby":{
                "value":"student_course_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "SQL":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"student_course_id"
                }
            ],
            "from":"Transcript_Contents",
            "groupby":{
                "value":"student_course_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Show the date of the transcript which shows the least number of results, also list the id.",
        "SQL":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.transcript_date"
                },
                {
                    "value":"T1.transcript_id"
                }
            ],
            "from":[
                {
                    "value":"Transcript_Contents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Transcripts",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.transcript_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the date and id of the transcript with the least number of results?",
        "SQL":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.transcript_date"
                },
                {
                    "value":"T1.transcript_id"
                }
            ],
            "from":[
                {
                    "value":"Transcript_Contents",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Transcripts",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.transcript_id",
                            "T2.transcript_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.transcript_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Find the semester when both Master students and Bachelor students got enrolled in.",
        "SQL":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "SQL_parse":{
            "intersect":[
                {
                    "select_distinct":{
                        "value":"T2.semester_id"
                    },
                    "from":[
                        {
                            "value":"Degree_Programs",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.degree_program_id",
                                    "T2.degree_program_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "degree_summary_name",
                            {
                                "literal":"Master"
                            }
                        ]
                    }
                },
                {
                    "select_distinct":{
                        "value":"T2.semester_id"
                    },
                    "from":[
                        {
                            "value":"Degree_Programs",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.degree_program_id",
                                    "T2.degree_program_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "degree_summary_name",
                            {
                                "literal":"Bachelor"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "SQL":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "SQL_parse":{
            "intersect":[
                {
                    "select_distinct":{
                        "value":"T2.semester_id"
                    },
                    "from":[
                        {
                            "value":"Degree_Programs",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.degree_program_id",
                                    "T2.degree_program_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "degree_summary_name",
                            {
                                "literal":"Master"
                            }
                        ]
                    }
                },
                {
                    "select_distinct":{
                        "value":"T2.semester_id"
                    },
                    "from":[
                        {
                            "value":"Degree_Programs",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Student_Enrolment",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.degree_program_id",
                                    "T2.degree_program_id"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "degree_summary_name",
                            {
                                "literal":"Bachelor"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"How many different addresses do the students currently live?",
        "SQL":"SELECT count(DISTINCT current_address_id) FROM Students",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"current_address_id"
                }
            },
            "from":"Students"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the different addresses that have students living there?",
        "SQL":"SELECT count(DISTINCT current_address_id) FROM Students",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"current_address_id"
                }
            },
            "from":"Students"
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"List all the student details in reversed lexicographical order.",
        "SQL":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "SQL_parse":{
            "select":{
                "value":"other_student_details"
            },
            "from":"Students",
            "orderby":{
                "value":"other_student_details",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What other details can you tell me about students in reverse alphabetical order?",
        "SQL":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "SQL_parse":{
            "select":{
                "value":"other_student_details"
            },
            "from":"Students",
            "orderby":{
                "value":"other_student_details",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Describe the section h.",
        "SQL":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "SQL_parse":{
            "select":{
                "value":"section_description"
            },
            "from":"Sections",
            "where":{
                "eq":[
                    "section_name",
                    {
                        "literal":"h"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What is the description for the section named h?",
        "SQL":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "SQL_parse":{
            "select":{
                "value":"section_description"
            },
            "from":"Sections",
            "where":{
                "eq":[
                    "section_name",
                    {
                        "literal":"h"
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "SQL":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "SQL_parse":{
            "select":{
                "value":"t1.first_name"
            },
            "from":[
                {
                    "value":"students",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"addresses",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.permanent_address_id",
                            "t2.address_id"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "t2.country",
                            {
                                "literal":"haiti"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "t1.cell_mobile_number",
                            {
                                "literal":"09700166582"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"student_transcripts_tracking",
        "question":"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "SQL":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "SQL_parse":{
            "select":{
                "value":"t1.first_name"
            },
            "from":[
                {
                    "value":"students",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"addresses",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.permanent_address_id",
                            "t2.address_id"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "t2.country",
                            {
                                "literal":"haiti"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "t1.cell_mobile_number",
                            {
                                "literal":"09700166582"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the title of all cartoons in alphabetical order.",
        "SQL":"SELECT Title FROM Cartoon ORDER BY title",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "orderby":{
                "value":"title"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the titles of the cartoons sorted alphabetically?",
        "SQL":"SELECT Title FROM Cartoon ORDER BY title",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "orderby":{
                "value":"title"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List all cartoon directed by \"Ben Jones\".",
        "SQL":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "where":{
                "eq":[
                    "Directed_by",
                    "Ben Jones"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the names of all cartoons directed by Ben Jones?",
        "SQL":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "where":{
                "eq":[
                    "Directed_by",
                    "Ben Jones"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"How many cartoons were written by \"Joseph Kuhr\"?",
        "SQL":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Cartoon",
            "where":{
                "eq":[
                    "Written_by",
                    "Joseph Kuhr"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the number of cartoones written by Joseph Kuhr?",
        "SQL":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Cartoon",
            "where":{
                "eq":[
                    "Written_by",
                    "Joseph Kuhr"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"list all cartoon titles and their directors ordered by their air date",
        "SQL":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"title"
                },
                {
                    "value":"Directed_by"
                }
            ],
            "from":"Cartoon",
            "orderby":{
                "value":"Original_air_date"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the name and directors of all the cartoons that are ordered by air date?",
        "SQL":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "SQL_parse":{
            "select":[
                {
                    "value":"title"
                },
                {
                    "value":"Directed_by"
                }
            ],
            "from":"Cartoon",
            "orderby":{
                "value":"Original_air_date"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "SQL":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Directed_by",
                            "Ben Jones"
                        ]
                    },
                    {
                        "eq":[
                            "Directed_by",
                            "Brandon Vietti"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "SQL":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "SQL_parse":{
            "select":{
                "value":"Title"
            },
            "from":"Cartoon",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Directed_by",
                            "Ben Jones"
                        ]
                    },
                    {
                        "eq":[
                            "Directed_by",
                            "Brandon Vietti"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "SQL":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Country"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"Country"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the country with the most number of TV Channels and how many does it have?",
        "SQL":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Country"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"Country"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the number of different series names and contents in the TV Channel table.",
        "SQL":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "distinct":true,
                        "count":"series_name"
                    }
                },
                {
                    "value":{
                        "distinct":true,
                        "count":"content"
                    }
                }
            ],
            "from":"TV_Channel"
        }
    },
    {
        "db_id":"tvshow",
        "question":"How many different series and contents are listed in the TV Channel table?",
        "SQL":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "distinct":true,
                        "count":"series_name"
                    }
                },
                {
                    "value":{
                        "distinct":true,
                        "count":"content"
                    }
                }
            ],
            "from":"TV_Channel"
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the content of TV Channel with serial name \"Sky Radio\"?",
        "SQL":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"Content"
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the content of the series Sky Radio?",
        "SQL":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"Content"
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "SQL":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"Package_Option"
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "SQL":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"Package_Option"
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"How many TV Channel using language English?",
        "SQL":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "English"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"How many TV Channels use the English language?",
        "SQL":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "English"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the language used least number of TV Channel. List language and number of TV Channel.",
        "SQL":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"LANGUAGE"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the languages used by the least number of TV Channels and how many channels use it?",
        "SQL":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"LANGUAGE"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"List each language and the number of TV Channels using it.",
        "SQL":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"LANGUAGE"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"For each language, list the number of TV Channels that use it.",
        "SQL":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"TV_Channel",
            "groupby":{
                "value":"LANGUAGE"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "SQL":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "SQL_parse":{
            "select":{
                "value":"T1.series_name"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Title",
                    "The Rise of the Blue Beetle!"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "SQL":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "SQL_parse":{
            "select":{
                "value":"T1.series_name"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Title",
                    "The Rise of the Blue Beetle!"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "SQL":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"T2.Title"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "SQL":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"T2.Title"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the Episode of all TV series sorted by rating.",
        "SQL":"SELECT Episode FROM TV_series ORDER BY rating",
        "SQL_parse":{
            "select":{
                "value":"Episode"
            },
            "from":"TV_series",
            "orderby":{
                "value":"rating"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are all of the episodes ordered by ratings?",
        "SQL":"SELECT Episode FROM TV_series ORDER BY rating",
        "SQL_parse":{
            "select":{
                "value":"Episode"
            },
            "from":"TV_series",
            "orderby":{
                "value":"rating"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "SQL":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Episode"
                },
                {
                    "value":"Rating"
                }
            ],
            "from":"TV_series",
            "orderby":{
                "value":"Rating",
                "sort":"desc"
            },
            "limit":3
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "SQL":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "SQL_parse":{
            "select":[
                {
                    "value":"Episode"
                },
                {
                    "value":"Rating"
                }
            ],
            "from":"TV_series",
            "orderby":{
                "value":"Rating",
                "sort":"desc"
            },
            "limit":3
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is minimum and maximum share of TV series?",
        "SQL":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"SHARE"
                    }
                },
                {
                    "value":{
                        "min":"SHARE"
                    }
                }
            ],
            "from":"TV_series"
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the maximum and minimum share for the TV series?",
        "SQL":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"SHARE"
                    }
                },
                {
                    "value":{
                        "min":"SHARE"
                    }
                }
            ],
            "from":"TV_series"
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "SQL":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"Air_Date"
            },
            "from":"TV_series",
            "where":{
                "eq":[
                    "Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"When did the episode \"A Love of a Lifetime\" air?",
        "SQL":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"Air_Date"
            },
            "from":"TV_series",
            "where":{
                "eq":[
                    "Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "SQL":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"Weekly_Rank"
            },
            "from":"TV_series",
            "where":{
                "eq":[
                    "Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "SQL":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"Weekly_Rank"
            },
            "from":"TV_series",
            "where":{
                "eq":[
                    "Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "SQL":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"T1.series_name"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"TV_series",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "SQL":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "SQL_parse":{
            "select":{
                "value":"T1.series_name"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"TV_series",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Episode",
                    "A Love of a Lifetime"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "SQL":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"T2.Episode"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"TV_series",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the episode for the TV series named \"Sky Radio\"?",
        "SQL":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "SQL_parse":{
            "select":{
                "value":"T2.Episode"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"TV_series",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.series_name",
                    "Sky Radio"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"Find the number of cartoons directed by each of the listed directors.",
        "SQL":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"Directed_by"
                }
            ],
            "from":"cartoon",
            "groupby":{
                "value":"Directed_by"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"How many cartoons did each director create?",
        "SQL":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"Directed_by"
                }
            ],
            "from":"cartoon",
            "groupby":{
                "value":"Directed_by"
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"Find the production code and channel of the most recently aired cartoon .",
        "SQL":"select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"production_code"
                },
                {
                    "value":"channel"
                }
            ],
            "from":"cartoon",
            "orderby":{
                "value":"original_air_date",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the produdction code and channel of the most recent cartoon ?",
        "SQL":"select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"production_code"
                },
                {
                    "value":"channel"
                }
            ],
            "from":"cartoon",
            "orderby":{
                "value":"original_air_date",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"tvshow",
        "question":"Find the package choice and series name of the TV channel that has high definition TV.",
        "SQL":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"package_option"
                },
                {
                    "value":"series_name"
                }
            ],
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "hight_definition_TV",
                    "yes"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "SQL":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"package_option"
                },
                {
                    "value":"series_name"
                }
            ],
            "from":"TV_Channel",
            "where":{
                "eq":[
                    "hight_definition_TV",
                    "yes"
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"which countries' tv channels are playing some cartoon written by Todd Casey?",
        "SQL":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "SQL_parse":{
            "select":{
                "value":"T1.country"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.written_by",
                    {
                        "literal":"Todd Casey"
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the countries that have cartoons on TV that were written by Todd Casey?",
        "SQL":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "SQL_parse":{
            "select":{
                "value":"T1.country"
            },
            "from":[
                {
                    "value":"TV_Channel",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"cartoon",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.id",
                            "T2.Channel"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.written_by",
                    {
                        "literal":"Todd Casey"
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "SQL":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"country"
                    },
                    "from":"TV_Channel"
                },
                {
                    "select":{
                        "value":"T1.country"
                    },
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.written_by",
                            {
                                "literal":"Todd Casey"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the countries that are not playing cartoons written by Todd Casey?",
        "SQL":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"country"
                    },
                    "from":"TV_Channel"
                },
                {
                    "select":{
                        "value":"T1.country"
                    },
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.written_by",
                            {
                                "literal":"Todd Casey"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "SQL":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.series_name"
                        },
                        {
                            "value":"T1.country"
                        }
                    ],
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.directed_by",
                            {
                                "literal":"Michael Chang"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.series_name"
                        },
                        {
                            "value":"T1.country"
                        }
                    ],
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.directed_by",
                            {
                                "literal":"Ben Jones"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "SQL":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":[
                        {
                            "value":"T1.series_name"
                        },
                        {
                            "value":"T1.country"
                        }
                    ],
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.directed_by",
                            {
                                "literal":"Michael Chang"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.series_name"
                        },
                        {
                            "value":"T1.country"
                        }
                    ],
                    "from":[
                        {
                            "value":"TV_Channel",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"cartoon",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.id",
                                    "T2.Channel"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.directed_by",
                            {
                                "literal":"Ben Jones"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "SQL":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "SQL_parse":{
            "select":[
                {
                    "value":"Pixel_aspect_ratio_PAR"
                },
                {
                    "value":"country"
                }
            ],
            "from":"tv_channel",
            "where":{
                "neq":[
                    "LANGUAGE",
                    {
                        "literal":"English"
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "SQL":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "SQL_parse":{
            "select":[
                {
                    "value":"Pixel_aspect_ratio_PAR"
                },
                {
                    "value":"country"
                }
            ],
            "from":"tv_channel",
            "where":{
                "neq":[
                    "LANGUAGE",
                    {
                        "literal":"English"
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"find id of the tv channels that from the countries where have more than two tv channels.",
        "SQL":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "SQL_parse":{
            "select":{
                "value":"id"
            },
            "from":"tv_channel",
            "groupby":{
                "value":"country"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the ids of all tv channels that have more than 2 TV channels?",
        "SQL":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "SQL_parse":{
            "select":{
                "value":"id"
            },
            "from":"tv_channel",
            "groupby":{
                "value":"country"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "SQL":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"id"
                    },
                    "from":"TV_Channel"
                },
                {
                    "select":{
                        "value":"channel"
                    },
                    "from":"cartoon",
                    "where":{
                        "eq":[
                            "directed_by",
                            {
                                "literal":"Ben Jones"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "SQL":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"id"
                    },
                    "from":"TV_Channel"
                },
                {
                    "select":{
                        "value":"channel"
                    },
                    "from":"cartoon",
                    "where":{
                        "eq":[
                            "directed_by",
                            {
                                "literal":"Ben Jones"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"tvshow",
        "question":"find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "SQL":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "SQL_parse":{
            "select":{
                "value":"package_option"
            },
            "from":"TV_Channel",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"channel"
                        },
                        "from":"cartoon",
                        "where":{
                            "eq":[
                                "directed_by",
                                {
                                    "literal":"Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"tvshow",
        "question":"What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "SQL":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "SQL_parse":{
            "select":{
                "value":"package_option"
            },
            "from":"TV_Channel",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"channel"
                        },
                        "from":"cartoon",
                        "where":{
                            "eq":[
                                "directed_by",
                                {
                                    "literal":"Ben Jones"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"How many poker players are there?",
        "SQL":"SELECT count(*) FROM poker_player",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"Count the number of poker players.",
        "SQL":"SELECT count(*) FROM poker_player",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"List the earnings of poker players in descending order.",
        "SQL":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "SQL_parse":{
            "select":{
                "value":"Earnings"
            },
            "from":"poker_player",
            "orderby":{
                "value":"Earnings",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the earnings of poker players, ordered descending by value?",
        "SQL":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "SQL_parse":{
            "select":{
                "value":"Earnings"
            },
            "from":"poker_player",
            "orderby":{
                "value":"Earnings",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"List the final tables made and the best finishes of poker players.",
        "SQL":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "SQL_parse":{
            "select":[
                {
                    "value":"Final_Table_Made"
                },
                {
                    "value":"Best_Finish"
                }
            ],
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the final tables made and best finishes for all poker players?",
        "SQL":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "SQL_parse":{
            "select":[
                {
                    "value":"Final_Table_Made"
                },
                {
                    "value":"Best_Finish"
                }
            ],
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the average earnings of poker players?",
        "SQL":"SELECT avg(Earnings) FROM poker_player",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"Earnings"
                }
            },
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the average earnings across all poker players.",
        "SQL":"SELECT avg(Earnings) FROM poker_player",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"Earnings"
                }
            },
            "from":"poker_player"
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the money rank of the poker player with the highest earnings?",
        "SQL":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Money_Rank"
            },
            "from":"poker_player",
            "orderby":{
                "value":"Earnings",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the money rank of the player with the greatest earnings.",
        "SQL":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Money_Rank"
            },
            "from":"poker_player",
            "orderby":{
                "value":"Earnings",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "SQL":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"Final_Table_Made"
                }
            },
            "from":"poker_player",
            "where":{
                "lt":[
                    "Earnings",
                    200000
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the maximum final tables made across all poker players who have earnings below 200000.",
        "SQL":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"Final_Table_Made"
                }
            },
            "from":"poker_player",
            "where":{
                "lt":[
                    "Earnings",
                    200000
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of poker players?",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the names of all the poker players.",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of poker players whose earnings is higher than 300000?",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.Earnings",
                    300000
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Give the names of poker players who have earnings above 300000.",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.Earnings",
                    300000
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"List the names of poker players ordered by the final tables made in ascending order.",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Final_Table_Made"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Final_Table_Made"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the birth date of the poker player with the lowest earnings?",
        "SQL":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Birth_Date"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Earnings",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the birth date of the poker player with the lowest earnings.",
        "SQL":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Birth_Date"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Earnings",
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the money rank of the tallest poker player?",
        "SQL":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Money_Rank"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T1.Height",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the money rank of the poker player with the greatest height.",
        "SQL":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Money_Rank"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T1.Height",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the average earnings of poker players with height higher than 200?",
        "SQL":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"T2.Earnings"
                }
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T1.Height",
                    200
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Give average earnings of poker players who are taller than 200.",
        "SQL":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"T2.Earnings"
                }
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T1.Height",
                    200
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of poker players in descending order of earnings?",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Earnings",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the names of poker players sorted by their earnings descending.",
        "SQL":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"people",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"poker_player",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.People_ID",
                            "T2.People_ID"
                        ]
                    }
                }
            ],
            "orderby":{
                "value":"T2.Earnings",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are different nationalities of people and the corresponding number of people from each nation?",
        "SQL":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "SQL_parse":{
            "select":[
                {
                    "value":"Nationality"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"people",
            "groupby":{
                "value":"Nationality"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"How many people are there of each nationality?",
        "SQL":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "SQL_parse":{
            "select":[
                {
                    "value":"Nationality"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"people",
            "groupby":{
                "value":"Nationality"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What is the most common nationality of people?",
        "SQL":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Nationality"
            },
            "from":"people",
            "groupby":{
                "value":"Nationality"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"Give the nationality that is most common across all people.",
        "SQL":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Nationality"
            },
            "from":"people",
            "groupby":{
                "value":"Nationality"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the nationalities that are shared by at least two people?",
        "SQL":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"Nationality"
            },
            "from":"people",
            "groupby":{
                "value":"Nationality"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Return the nationalities for which there are two or more people.",
        "SQL":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"Nationality"
            },
            "from":"people",
            "groupby":{
                "value":"Nationality"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"List the names and birth dates of people in ascending alphabetical order of name.",
        "SQL":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"Birth_Date"
                }
            ],
            "from":"people",
            "orderby":{
                "value":"Name",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "SQL":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"Birth_Date"
                }
            ],
            "from":"people",
            "orderby":{
                "value":"Name",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"Show names of people whose nationality is not \"Russia\".",
        "SQL":"SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"people",
            "where":{
                "neq":[
                    "Nationality",
                    "Russia"
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of people who are not from Russia?",
        "SQL":"SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"people",
            "where":{
                "neq":[
                    "Nationality",
                    "Russia"
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"List the names of people that are not poker players.",
        "SQL":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"people",
            "where":{
                "nin":[
                    "People_ID",
                    {
                        "select":{
                            "value":"People_ID"
                        },
                        "from":"poker_player"
                    }
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"What are the names of people who do not play poker?",
        "SQL":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"people",
            "where":{
                "nin":[
                    "People_ID",
                    {
                        "select":{
                            "value":"People_ID"
                        },
                        "from":"poker_player"
                    }
                ]
            }
        }
    },
    {
        "db_id":"poker_player",
        "question":"How many distinct nationalities are there?",
        "SQL":"SELECT count(DISTINCT Nationality) FROM people",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Nationality"
                }
            },
            "from":"people"
        }
    },
    {
        "db_id":"poker_player",
        "question":"Count the number of different nationalities.",
        "SQL":"SELECT count(DISTINCT Nationality) FROM people",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Nationality"
                }
            },
            "from":"people"
        }
    },
    {
        "db_id":"voter_1",
        "question":"How many states are there?",
        "SQL":"SELECT count(*) FROM area_code_state",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"area_code_state"
        }
    },
    {
        "db_id":"voter_1",
        "question":"List the contestant numbers and names, ordered by contestant name descending.",
        "SQL":"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "SQL_parse":{
            "select":[
                {
                    "value":"contestant_number"
                },
                {
                    "value":"contestant_name"
                }
            ],
            "from":"contestants",
            "orderby":{
                "value":"contestant_name",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"List the vote ids, phone numbers and states of all votes.",
        "SQL":"SELECT vote_id ,  phone_number ,  state FROM votes",
        "SQL_parse":{
            "select":[
                {
                    "value":"vote_id"
                },
                {
                    "value":"phone_number"
                },
                {
                    "value":"state"
                }
            ],
            "from":"votes"
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the maximum and minimum values of area codes?",
        "SQL":"SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"area_code"
                    }
                },
                {
                    "value":{
                        "min":"area_code"
                    }
                }
            ],
            "from":"area_code_state"
        }
    },
    {
        "db_id":"voter_1",
        "question":"What is last date created of votes from the state 'CA'?",
        "SQL":"SELECT max(created) FROM votes WHERE state  =  'CA'",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"created"
                }
            },
            "from":"votes",
            "where":{
                "eq":[
                    "state",
                    {
                        "literal":"CA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the names of the contestants whose names are not 'Jessie Alloway'",
        "SQL":"SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "SQL_parse":{
            "select":{
                "value":"contestant_name"
            },
            "from":"contestants",
            "where":{
                "neq":[
                    "contestant_name",
                    {
                        "literal":"Jessie Alloway"
                    }
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the distinct states and create time of all votes?",
        "SQL":"SELECT DISTINCT state ,  created FROM votes",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"state"
                },
                {
                    "value":"created"
                }
            ],
            "from":"votes"
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the contestant numbers and names of the contestants who had at least two votes?",
        "SQL":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.contestant_number"
                },
                {
                    "value":"T1.contestant_name"
                }
            ],
            "from":[
                {
                    "value":"contestants",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"votes",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.contestant_number",
                            "T2.contestant_number"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.contestant_number"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "SQL":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.contestant_number"
                },
                {
                    "value":"T1.contestant_name"
                }
            ],
            "from":[
                {
                    "value":"contestants",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"votes",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.contestant_number",
                            "T2.contestant_number"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.contestant_number"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the number of votes from state 'NY' or 'CA'?",
        "SQL":"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"votes",
            "where":{
                "or":[
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"NY"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"CA"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"How many contestants did not get voted?",
        "SQL":"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"contestants",
            "where":{
                "nin":[
                    "contestant_number",
                    {
                        "select":{
                            "value":"contestant_number"
                        },
                        "from":"votes"
                    }
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"What is the area code in which the most voters voted?",
        "SQL":"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.area_code"
            },
            "from":[
                {
                    "value":"area_code_state",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"votes",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.state",
                            "T2.state"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.area_code"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"voter_1",
        "question":"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "SQL":"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.created"
                },
                {
                    "value":"T2.state"
                },
                {
                    "value":"T2.phone_number"
                }
            ],
            "from":[
                {
                    "value":"contestants",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"votes",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.contestant_number",
                            "T2.contestant_number"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.contestant_name",
                    {
                        "literal":"Tabatha Gehling"
                    }
                ]
            }
        }
    },
    {
        "db_id":"voter_1",
        "question":"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "SQL":"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T3.area_code"
                    },
                    "from":[
                        {
                            "value":"contestants",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"votes",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.contestant_number",
                                    "T2.contestant_number"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"area_code_state",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T2.state",
                                    "T3.state"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.contestant_name",
                            {
                                "literal":"Tabatha Gehling"
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T3.area_code"
                    },
                    "from":[
                        {
                            "value":"contestants",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"votes",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.contestant_number",
                                    "T2.contestant_number"
                                ]
                            }
                        },
                        {
                            "join":{
                                "value":"area_code_state",
                                "name":"T3"
                            },
                            "on":{
                                "eq":[
                                    "T2.state",
                                    "T3.state"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T1.contestant_name",
                            {
                                "literal":"Kelly Clauss"
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"voter_1",
        "question":"Return the names of the contestants whose names contain the substring 'Al' .",
        "SQL":"select contestant_name from contestants where contestant_name like \"%al%\"",
        "SQL_parse":{
            "select":{
                "value":"contestant_name"
            },
            "from":"contestants",
            "where":{
                "like":[
                    "contestant_name",
                    "%al%"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of all the countries that became independent after 1950?",
        "SQL":"SELECT Name FROM country WHERE IndepYear  >  1950",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "gt":[
                    "IndepYear",
                    1950
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the names of the nations that were founded after 1950.",
        "SQL":"SELECT Name FROM country WHERE IndepYear  >  1950",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "gt":[
                    "IndepYear",
                    1950
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many countries have a republic as their form of government?",
        "SQL":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "GovernmentForm",
                    "Republic"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many countries have governments that are republics?",
        "SQL":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "GovernmentForm",
                    "Republic"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total surface area of the countries in the Caribbean region?",
        "SQL":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"SurfaceArea"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Region",
                    "Caribbean"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How much surface area do the countires in the Carribean cover together?",
        "SQL":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"SurfaceArea"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Region",
                    "Caribbean"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which continent is Anguilla in?",
        "SQL":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "SQL_parse":{
            "select":{
                "value":"Continent"
            },
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Anguilla"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the continent name which Anguilla belongs to?",
        "SQL":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "SQL_parse":{
            "select":{
                "value":"Continent"
            },
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Anguilla"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which region is the city Kabul located in?",
        "SQL":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "SQL_parse":{
            "select":{
                "value":"Region"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"city",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Name",
                    "Kabul"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What region is Kabul in?",
        "SQL":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "SQL_parse":{
            "select":{
                "value":"Region"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"city",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Name",
                    "Kabul"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which language is the most popular in Aruba?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Name",
                    "Aruba"
                ]
            },
            "orderby":{
                "value":"Percentage",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What language is predominantly spoken in Aruba?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Name",
                    "Aruba"
                ]
            },
            "orderby":{
                "value":"Percentage",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the population and life expectancies in Brazil?",
        "SQL":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Population"
                },
                {
                    "value":"LifeExpectancy"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Brazil"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give me Brazil\u2019s population and life expectancies.",
        "SQL":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Population"
                },
                {
                    "value":"LifeExpectancy"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Brazil"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the region and population of Angola?",
        "SQL":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Population"
                },
                {
                    "value":"Region"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Angola"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What region does Angola belong to and what is its population?",
        "SQL":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "SQL_parse":{
            "select":[
                {
                    "value":"Population"
                },
                {
                    "value":"Region"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Name",
                    "Angola"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the average expected life expectancy for countries in the region of Central Africa?",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Region",
                    "Central Africa"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How long is the people\u2019s average life expectancy in Central Africa?",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Region",
                    "Central Africa"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the name of country that has the shortest life expectancy in Asia?",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            },
            "orderby":{
                "value":"LifeExpectancy"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the name of the country in Asia with the lowest life expectancy.",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            },
            "orderby":{
                "value":"LifeExpectancy"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total population and maximum GNP in Asia?",
        "SQL":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":{
                        "max":"GNP"
                    }
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many people live in Asia, and what is the largest GNP among them?",
        "SQL":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":{
                        "max":"GNP"
                    }
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the average life expectancy in African countries that are republics?",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq":[
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the average life expectancy for countries in Africa which are republics?",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "eq":[
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total surface area of the continents Asia and Europe?",
        "SQL":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"SurfaceArea"
                }
            },
            "from":"country",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Continent",
                            "Asia"
                        ]
                    },
                    {
                        "eq":[
                            "Continent",
                            "Europe"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the total surface area covered by countries in Asia or Europe.",
        "SQL":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"SurfaceArea"
                }
            },
            "from":"country",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Continent",
                            "Asia"
                        ]
                    },
                    {
                        "eq":[
                            "Continent",
                            "Europe"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many people live in Gelderland district?",
        "SQL":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"Population"
                }
            },
            "from":"city",
            "where":{
                "eq":[
                    "District",
                    "Gelderland"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total population of Gelderland district?",
        "SQL":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"Population"
                }
            },
            "from":"city",
            "where":{
                "eq":[
                    "District",
                    "Gelderland"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the average GNP and total population in all nations whose government is US territory?",
        "SQL":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"GNP"
                    }
                },
                {
                    "value":{
                        "sum":"population"
                    }
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "GovernmentForm",
                    "US Territory"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the mean GNP and total population of nations which are considered US territory.",
        "SQL":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "avg":"GNP"
                    }
                },
                {
                    "value":{
                        "sum":"population"
                    }
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "GovernmentForm",
                    "US Territory"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many unique languages are spoken in the world?",
        "SQL":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"LANGUAGE"
                }
            },
            "from":"countrylanguage"
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the number of distinct languages used around the world?",
        "SQL":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"LANGUAGE"
                }
            },
            "from":"countrylanguage"
        }
    },
    {
        "db_id":"world_1",
        "question":"How many type of governments are in Africa?",
        "SQL":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"GovernmentForm"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Africa"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many different forms of governments are there in Africa?",
        "SQL":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"GovernmentForm"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Africa"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total number of languages used in Aruba?",
        "SQL":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"T2.Language"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Name",
                    "Aruba"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many languages are spoken in Aruba?",
        "SQL":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"T2.Language"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Name",
                    "Aruba"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many official languages does Afghanistan have?",
        "SQL":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq":[
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many official languages are spoken in Afghanistan?",
        "SQL":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Name",
                            "Afghanistan"
                        ]
                    },
                    {
                        "eq":[
                            "IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is name of the country that speaks the largest number of languages?",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the name of the nation that uses the greatest amount of languages.",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Which continent has the most diverse languages?",
        "SQL":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Continent"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Continent"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Which continent speaks the most languages?",
        "SQL":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Continent"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Continent"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"How many countries speak both English and Dutch?",
        "SQL":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":{
                "intersect":[
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "English"
                            ]
                        }
                    },
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "Dutch"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the number of nations that use English and Dutch?",
        "SQL":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":{
                "intersect":[
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "English"
                            ]
                        }
                    },
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "Dutch"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of nations speak both English and French?",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.Language",
                            "English"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.Language",
                            "French"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the names of nations that speak both English and French.",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.Language",
                            "English"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "eq":[
                            "T2.Language",
                            "French"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of nations where both English and French are official languages?",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "English"
                                ]
                            },
                            {
                                "eq":[
                                    "T2.IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "French"
                                ]
                            },
                            {
                                "eq":[
                                    "T2.IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the names of countries with English and French as official languages.",
        "SQL":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "English"
                                ]
                            },
                            {
                                "eq":[
                                    "T2.IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"T1.Name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "French"
                                ]
                            },
                            {
                                "eq":[
                                    "T2.IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the number of distinct continents where Chinese is spoken?",
        "SQL":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Continent"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Language",
                    "Chinese"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many continents speak Chinese?",
        "SQL":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Continent"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Language",
                    "Chinese"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the regions that use English or Dutch?",
        "SQL":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Region"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T2.Language",
                            "English"
                        ]
                    },
                    {
                        "eq":[
                            "T2.Language",
                            "Dutch"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which regions speak Dutch or English?",
        "SQL":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Region"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "or":[
                    {
                        "eq":[
                            "T2.Language",
                            "English"
                        ]
                    },
                    {
                        "eq":[
                            "T2.Language",
                            "Dutch"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the countries where either English or Dutch is the official language ?",
        "SQL":"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "SQL_parse":{
            "union":[
                {
                    "select":{
                        "value":"t1.name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.code",
                                    "t2.countrycode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "t2.language",
                                    "english"
                                ]
                            },
                            {
                                "eq":[
                                    "isofficial",
                                    "t"
                                ]
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "value":"t1.name"
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"t1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"t2"
                            },
                            "on":{
                                "eq":[
                                    "t1.code",
                                    "t2.countrycode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "t2.language",
                                    "dutch"
                                ]
                            },
                            {
                                "eq":[
                                    "isofficial",
                                    "t"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Which countries have either English or Dutch as an official language?",
        "SQL":"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "SQL_parse":{
            "union":[
                {
                    "select":{
                        "all_columns":{

                        }
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "English"
                                ]
                            },
                            {
                                "eq":[
                                    "IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                },
                {
                    "select":{
                        "all_columns":{

                        }
                    },
                    "from":[
                        {
                            "value":"country",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"countrylanguage",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.Code",
                                    "T2.CountryCode"
                                ]
                            }
                        }
                    ],
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "T2.Language",
                                    "Dutch"
                                ]
                            },
                            {
                                "eq":[
                                    "IsOfficial",
                                    "T"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Which language is the most popular on the Asian continent?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Continent",
                    "Asia"
                ]
            },
            "groupby":{
                "value":"T2.Language"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the language that is used by the largest number of Asian nations?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.Continent",
                    "Asia"
                ]
            },
            "groupby":{
                "value":"T2.Language"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Which languages are spoken by only one country in republic governments?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.GovernmentForm",
                    "Republic"
                ]
            },
            "groupby":{
                "value":"T2.Language"
            },
            "having":{
                "eq":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What languages are only used by a single country with a republic government?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.GovernmentForm",
                    "Republic"
                ]
            },
            "groupby":{
                "value":"T2.Language"
            },
            "having":{
                "eq":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Find the city with the largest population that uses English.",
        "SQL":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":"T1.Population"
                }
            ],
            "from":[
                {
                    "value":"city",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryCode",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Language",
                    "English"
                ]
            },
            "orderby":{
                "value":"T1.Population",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the most populace city that speaks English?",
        "SQL":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":"T1.Population"
                }
            ],
            "from":[
                {
                    "value":"city",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.CountryCode",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.Language",
                    "English"
                ]
            },
            "orderby":{
                "value":"T1.Population",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Find the name, population and expected life length of asian country with the largest area?",
        "SQL":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"Population"
                },
                {
                    "value":"LifeExpectancy"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            },
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the name, population, and life expectancy of the largest Asian country by land?",
        "SQL":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"Population"
                },
                {
                    "value":"LifeExpectancy"
                }
            ],
            "from":"country",
            "where":{
                "eq":[
                    "Continent",
                    "Asia"
                ]
            },
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What is average life expectancy in the countries where English is not the official language?",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "nin":[
                    "Name",
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "and":[
                                {
                                    "eq":[
                                        "T2.Language",
                                        "English"
                                    ]
                                },
                                {
                                    "eq":[
                                        "T2.IsOfficial",
                                        "T"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the mean life expectancy of countries in which English is not the official language.",
        "SQL":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"LifeExpectancy"
                }
            },
            "from":"country",
            "where":{
                "nin":[
                    "Name",
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "and":[
                                {
                                    "eq":[
                                        "T2.Language",
                                        "English"
                                    ]
                                },
                                {
                                    "eq":[
                                        "T2.IsOfficial",
                                        "T"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total number of people living in the nations that do not use English?",
        "SQL":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"Population"
                }
            },
            "from":"country",
            "where":{
                "nin":[
                    "Name",
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "English"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many people live in countries that do not speak English?",
        "SQL":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "SQL_parse":{
            "select":{
                "value":{
                    "sum":"Population"
                }
            },
            "from":"country",
            "where":{
                "nin":[
                    "Name",
                    {
                        "select":{
                            "value":"T1.Name"
                        },
                        "from":[
                            {
                                "value":"country",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"countrylanguage",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.Code",
                                        "T2.CountryCode"
                                    ]
                                }
                            }
                        ],
                        "where":{
                            "eq":[
                                "T2.Language",
                                "English"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the official language spoken in the country whose head of state is Beatrix?",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.HeadOfState",
                            "Beatrix"
                        ]
                    },
                    {
                        "eq":[
                            "T2.IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the official language used in the country the name of whose head of state is Beatrix.",
        "SQL":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":"T2.Language"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.HeadOfState",
                            "Beatrix"
                        ]
                    },
                    {
                        "eq":[
                            "T2.IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "SQL":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"T2.Language"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "lt":[
                            "IndepYear",
                            1930
                        ]
                    },
                    {
                        "eq":[
                            "T2.IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"For the countries founded before 1930, what is the total number of distinct official languages?",
        "SQL":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"T2.Language"
                }
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "lt":[
                            "IndepYear",
                            1930
                        ]
                    },
                    {
                        "eq":[
                            "T2.IsOfficial",
                            "T"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the countries that have greater surface area than any country in Europe?",
        "SQL":"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "gt":[
                    "SurfaceArea",
                    {
                        "select":{
                            "value":{
                                "min":"SurfaceArea"
                            }
                        },
                        "from":"country",
                        "where":{
                            "eq":[
                                "Continent",
                                "Europe"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which countries have greater area than that of any country in Europe?",
        "SQL":"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "gt":[
                    "SurfaceArea",
                    {
                        "select":{
                            "value":{
                                "min":"SurfaceArea"
                            }
                        },
                        "from":"country",
                        "where":{
                            "eq":[
                                "Continent",
                                "Europe"
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the African countries that have a  population less than any country in Asia?",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "lt":[
                            "population",
                            {
                                "select":{
                                    "value":{
                                        "max":"population"
                                    }
                                },
                                "from":"country",
                                "where":{
                                    "eq":[
                                        "Continent",
                                        "Asia"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which African countries have a smaller population than that of any country in Asia?",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Africa"
                        ]
                    },
                    {
                        "lt":[
                            "population",
                            {
                                "select":{
                                    "value":{
                                        "min":"population"
                                    }
                                },
                                "from":"country",
                                "where":{
                                    "eq":[
                                        "Continent",
                                        "Asia"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which Asian countries have a population that is larger than any country in Africa?",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Asia"
                        ]
                    },
                    {
                        "gt":[
                            "population",
                            {
                                "select":{
                                    "value":{
                                        "max":"population"
                                    }
                                },
                                "from":"country",
                                "where":{
                                    "eq":[
                                        "Continent",
                                        "Africa"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the Asian countries which have a population larger than that of any country in Africa?",
        "SQL":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "Continent",
                            "Asia"
                        ]
                    },
                    {
                        "gt":[
                            "population",
                            {
                                "select":{
                                    "value":{
                                        "min":"population"
                                    }
                                },
                                "from":"country",
                                "where":{
                                    "eq":[
                                        "Continent",
                                        "Africa"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the country codes for countries that do not speak English?",
        "SQL":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage"
                },
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage",
                    "where":{
                        "eq":[
                            "LANGUAGE",
                            "English"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the country codes for countries that do not speak English.",
        "SQL":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage"
                },
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage",
                    "where":{
                        "eq":[
                            "LANGUAGE",
                            "English"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the country codes of countries where people use languages other than English?",
        "SQL":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"CountryCode"
            },
            "from":"countrylanguage",
            "where":{
                "neq":[
                    "LANGUAGE",
                    "English"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the country codes for countries in which people speak langauges that are not English.",
        "SQL":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"CountryCode"
            },
            "from":"countrylanguage",
            "where":{
                "neq":[
                    "LANGUAGE",
                    "English"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "SQL":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"Code"
                    },
                    "from":"country",
                    "where":{
                        "neq":[
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage",
                    "where":{
                        "eq":[
                            "LANGUAGE",
                            "English"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the codes of countries that do not speak English and do not have Republics for governments.",
        "SQL":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"Code"
                    },
                    "from":"country",
                    "where":{
                        "neq":[
                            "GovernmentForm",
                            "Republic"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"CountryCode"
                    },
                    "from":"countrylanguage",
                    "where":{
                        "eq":[
                            "LANGUAGE",
                            "English"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"world_1",
        "question":"Which cities are in European countries where English is not the official language?",
        "SQL":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "SQL_parse":{
            "select_distinct":{
                "value":"T2.Name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"city",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.CountryCode",
                            "T1.Code"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Continent",
                            {
                                "literal":"Europe"
                            }
                        ]
                    },
                    {
                        "nin":[
                            "T1.Name",
                            {
                                "select":{
                                    "value":"T3.Name"
                                },
                                "from":[
                                    {
                                        "value":"country",
                                        "name":"T3"
                                    },
                                    {
                                        "join":{
                                            "value":"countrylanguage",
                                            "name":"T4"
                                        },
                                        "on":{
                                            "eq":[
                                                "T3.Code",
                                                "T4.CountryCode"
                                            ]
                                        }
                                    }
                                ],
                                "where":{
                                    "and":[
                                        {
                                            "eq":[
                                                "T4.IsOfficial",
                                                {
                                                    "literal":"T"
                                                }
                                            ]
                                        },
                                        {
                                            "eq":[
                                                "T4.Language",
                                                {
                                                    "literal":"English"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of cities in Europe for which English is not the official language?",
        "SQL":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "SQL_parse":{
            "select_distinct":{
                "value":"T2.Name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"city",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T2.CountryCode",
                            "T1.Code"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T1.Continent",
                            {
                                "literal":"Europe"
                            }
                        ]
                    },
                    {
                        "nin":[
                            "T1.Name",
                            {
                                "select":{
                                    "value":"T3.Name"
                                },
                                "from":[
                                    {
                                        "value":"country",
                                        "name":"T3"
                                    },
                                    {
                                        "join":{
                                            "value":"countrylanguage",
                                            "name":"T4"
                                        },
                                        "on":{
                                            "eq":[
                                                "T3.Code",
                                                "T4.CountryCode"
                                            ]
                                        }
                                    }
                                ],
                                "where":{
                                    "and":[
                                        {
                                            "eq":[
                                                "T4.IsOfficial",
                                                {
                                                    "literal":"T"
                                                }
                                            ]
                                        },
                                        {
                                            "eq":[
                                                "T4.Language",
                                                {
                                                    "literal":"English"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which unique cities are in Asian countries where Chinese is the official language ?",
        "SQL":"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"t3.name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"t1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"t2"
                    },
                    "on":{
                        "eq":[
                            "t1.code",
                            "t2.countrycode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"city",
                        "name":"t3"
                    },
                    "on":{
                        "eq":[
                            "t1.code",
                            "t3.countrycode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "t2.isofficial",
                            {
                                "literal":"t"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "t2.language",
                            {
                                "literal":"chinese"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "t1.continent",
                            "asia"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "SQL":"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "SQL_parse":{
            "select_distinct":{
                "value":"T3.Name"
            },
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"city",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T3.CountryCode"
                        ]
                    }
                }
            ],
            "where":{
                "and":[
                    {
                        "eq":[
                            "T2.IsOfficial",
                            {
                                "literal":"T"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T2.Language",
                            {
                                "literal":"Chinese"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "T1.Continent",
                            "Asia"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the name, independence year, and surface area of the country with the smallest population?",
        "SQL":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"SurfaceArea"
                },
                {
                    "value":"IndepYear"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"Population"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the name, year of independence, and surface area of the country that has the lowest population.",
        "SQL":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"SurfaceArea"
                },
                {
                    "value":"IndepYear"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"Population"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the population, name and leader of the country with the largest area?",
        "SQL":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"population"
                },
                {
                    "value":"HeadOfState"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the name, population, and head of state for the country that has the largest area.",
        "SQL":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"population"
                },
                {
                    "value":"HeadOfState"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "SQL":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"T2.Language"
                    }
                },
                {
                    "value":"T1.Name"
                }
            ],
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "SQL":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"T2.Language"
                    }
                },
                {
                    "value":"T1.Name"
                }
            ],
            "from":[
                {
                    "value":"country",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"countrylanguage",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Code",
                            "T2.CountryCode"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Find the number of cities in each district whose population is greater than the average population of cities?",
        "SQL":"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"District"
                }
            ],
            "from":"city",
            "where":{
                "gt":[
                    "Population",
                    {
                        "select":{
                            "value":{
                                "avg":"Population"
                            }
                        },
                        "from":"city"
                    }
                ]
            },
            "groupby":{
                "value":"District"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"How many cities in each district have a population that is above the average population across all cities?",
        "SQL":"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":"District"
                }
            ],
            "from":"city",
            "where":{
                "gt":[
                    "Population",
                    {
                        "select":{
                            "value":{
                                "avg":"Population"
                            }
                        },
                        "from":"city"
                    }
                ]
            },
            "groupby":{
                "value":"District"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "SQL":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":"GovernmentForm"
                }
            ],
            "from":"country",
            "groupby":{
                "value":"GovernmentForm"
            },
            "having":{
                "gt":[
                    {
                        "avg":"LifeExpectancy"
                    },
                    72
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "SQL":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":"GovernmentForm"
                }
            ],
            "from":"country",
            "groupby":{
                "value":"GovernmentForm"
            },
            "having":{
                "gt":[
                    {
                        "avg":"LifeExpectancy"
                    },
                    72
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "SQL":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":{
                        "avg":"LifeExpectancy"
                    }
                },
                {
                    "value":"Continent"
                }
            ],
            "from":"country",
            "groupby":{
                "value":"Continent"
            },
            "having":{
                "lt":[
                    {
                        "avg":"LifeExpectancy"
                    },
                    72
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "SQL":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"Population"
                    }
                },
                {
                    "value":{
                        "avg":"LifeExpectancy"
                    }
                },
                {
                    "value":"Continent"
                }
            ],
            "from":"country",
            "groupby":{
                "value":"Continent"
            },
            "having":{
                "lt":[
                    {
                        "avg":"LifeExpectancy"
                    },
                    72
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names and areas of countries with the top 5 largest area?",
        "SQL":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"SurfaceArea"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":5
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the names and surface areas of the 5 largest countries.",
        "SQL":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "SQL_parse":{
            "select":[
                {
                    "value":"Name"
                },
                {
                    "value":"SurfaceArea"
                }
            ],
            "from":"country",
            "orderby":{
                "value":"SurfaceArea",
                "sort":"desc"
            },
            "limit":5
        }
    },
    {
        "db_id":"world_1",
        "question":"What are names of countries with the top 3 largest population?",
        "SQL":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "orderby":{
                "value":"Population",
                "sort":"desc"
            },
            "limit":3
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the names of the 3 most populated countries.",
        "SQL":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "orderby":{
                "value":"Population",
                "sort":"desc"
            },
            "limit":3
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of the nations with the 3 lowest populations?",
        "SQL":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "orderby":{
                "value":"Population",
                "sort":"asc"
            },
            "limit":3
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the names of the 3 countries with the fewest people.",
        "SQL":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "orderby":{
                "value":"Population",
                "sort":"asc"
            },
            "limit":3
        }
    },
    {
        "db_id":"world_1",
        "question":"how many countries are in Asia?",
        "SQL":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "continent",
                    "Asia"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Count the number of countries in Asia.",
        "SQL":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"country",
            "where":{
                "eq":[
                    "continent",
                    "Asia"
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "SQL":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "continent",
                            "Europe"
                        ]
                    },
                    {
                        "eq":[
                            "Population",
                            "80000"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the names of countries that are in Europe and have a population equal to 80000.",
        "SQL":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "continent",
                            "Europe"
                        ]
                    },
                    {
                        "eq":[
                            "Population",
                            "80000"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "SQL":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"population"
                    }
                },
                {
                    "value":{
                        "avg":"surfacearea"
                    }
                }
            ],
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "continent",
                            "north america"
                        ]
                    },
                    {
                        "gt":[
                            "surfacearea",
                            3000
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "SQL":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "sum":"population"
                    }
                },
                {
                    "value":{
                        "avg":"surfacearea"
                    }
                }
            ],
            "from":"country",
            "where":{
                "and":[
                    {
                        "eq":[
                            "continent",
                            "north america"
                        ]
                    },
                    {
                        "gt":[
                            "surfacearea",
                            3000
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the cities whose population is between 160000 and 900000?",
        "SQL":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"city",
            "where":{
                "between":[
                    "Population",
                    160000,
                    900000
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the names of cities that have a population between 160000 and 900000 .",
        "SQL":"select name from city where population between 160000 and 900000",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"city",
            "where":{
                "between":[
                    "population",
                    160000,
                    900000
                ]
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Which language is spoken by the largest number of countries?",
        "SQL":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"LANGUAGE"
            },
            "from":"countrylanguage",
            "groupby":{
                "value":"LANGUAGE"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"Give the language that is spoken in the most countries.",
        "SQL":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"LANGUAGE"
            },
            "from":"countrylanguage",
            "groupby":{
                "value":"LANGUAGE"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the language spoken by the largest percentage of people in each country?",
        "SQL":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":"CountryCode"
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "SQL":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":"LANGUAGE"
                },
                {
                    "value":"CountryCode"
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "SQL":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "Spanish"
                ]
            },
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Count the number of countries for which Spanish is the predominantly spoken language.",
        "SQL":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "count":"*"
                    }
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "Spanish"
                ]
            },
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "SQL":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":"CountryCode"
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "Spanish"
                ]
            },
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"world_1",
        "question":"Return the codes of countries for which Spanish is the predominantly spoken language.",
        "SQL":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "SQL_parse":{
            "select":[
                {
                    "value":"CountryCode"
                },
                {
                    "value":{
                        "max":"Percentage"
                    }
                }
            ],
            "from":"countrylanguage",
            "where":{
                "eq":[
                    "LANGUAGE",
                    "Spanish"
                ]
            },
            "groupby":{
                "value":"CountryCode"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"How many conductors are there?",
        "SQL":"SELECT count(*) FROM conductor",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"conductor"
        }
    },
    {
        "db_id":"orchestra",
        "question":"Count the number of conductors.",
        "SQL":"SELECT count(*) FROM conductor",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"conductor"
        }
    },
    {
        "db_id":"orchestra",
        "question":"List the names of conductors in ascending order of age.",
        "SQL":"SELECT Name FROM conductor ORDER BY Age ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors, ordered by age?",
        "SQL":"SELECT Name FROM conductor ORDER BY Age ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Age",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors whose nationalities are not \"USA\"?",
        "SQL":"SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "where":{
                "neq":[
                    "Nationality",
                    {
                        "literal":"USA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Return the names of conductors that do not have the nationality \"USA\".",
        "SQL":"SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "where":{
                "neq":[
                    "Nationality",
                    {
                        "literal":"USA"
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the record companies of orchestras in descending order of years in which they were founded?",
        "SQL":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "SQL_parse":{
            "select":{
                "value":"Record_Company"
            },
            "from":"orchestra",
            "orderby":{
                "value":"Year_of_Founded",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "SQL":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "SQL_parse":{
            "select":{
                "value":"Record_Company"
            },
            "from":"orchestra",
            "orderby":{
                "value":"Year_of_Founded",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What is the average attendance of shows?",
        "SQL":"SELECT avg(Attendance) FROM SHOW",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"Attendance"
                }
            },
            "from":"SHOW"
        }
    },
    {
        "db_id":"orchestra",
        "question":"Return the average attendance across all shows.",
        "SQL":"SELECT avg(Attendance) FROM SHOW",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"Attendance"
                }
            },
            "from":"SHOW"
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "SQL":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"SHARE"
                    }
                },
                {
                    "value":{
                        "min":"SHARE"
                    }
                }
            ],
            "from":"performance",
            "where":{
                "neq":[
                    "TYPE",
                    "Live final"
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "SQL":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "SQL_parse":{
            "select":[
                {
                    "value":{
                        "max":"SHARE"
                    }
                },
                {
                    "value":{
                        "min":"SHARE"
                    }
                }
            ],
            "from":"performance",
            "where":{
                "neq":[
                    "TYPE",
                    "Live final"
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"How many different nationalities do conductors have?",
        "SQL":"SELECT count(DISTINCT Nationality) FROM conductor",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Nationality"
                }
            },
            "from":"conductor"
        }
    },
    {
        "db_id":"orchestra",
        "question":"Count the number of different nationalities of conductors.",
        "SQL":"SELECT count(DISTINCT Nationality) FROM conductor",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"Nationality"
                }
            },
            "from":"conductor"
        }
    },
    {
        "db_id":"orchestra",
        "question":"List names of conductors in descending order of years of work.",
        "SQL":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Year_of_Work",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors, sorted descending by the number of years they have worked?",
        "SQL":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Year_of_Work",
                "sort":"desc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"List the name of the conductor with the most years of work.",
        "SQL":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Year_of_Work",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"What is the name of the conductor who has worked the greatest number of years?",
        "SQL":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"conductor",
            "orderby":{
                "value":"Year_of_Work",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"Show the names of conductors and the orchestras they have conducted.",
        "SQL":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":"T2.Orchestra"
                }
            ],
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "SQL":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":"T2.Orchestra"
                }
            ],
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"orchestra",
        "question":"Show the names of conductors that have conducted more than one orchestras.",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Conductor_ID"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors who have conducted at more than one orchestra?",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Conductor_ID"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Show the name of the conductor that has conducted the most number of orchestras.",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Conductor_ID"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"What is the name of the conductor who has conducted the most orchestras?",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Conductor_ID"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "Year_of_Founded",
                    2008
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "SQL":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"conductor",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"orchestra",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Conductor_ID",
                            "T2.Conductor_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "Year_of_Founded",
                    2008
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Please show the different record companies and the corresponding number of orchestras.",
        "SQL":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "SQL_parse":{
            "select":[
                {
                    "value":"Record_Company"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"orchestra",
            "groupby":{
                "value":"Record_Company"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"How many orchestras does each record company manage?",
        "SQL":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "SQL_parse":{
            "select":[
                {
                    "value":"Record_Company"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"orchestra",
            "groupby":{
                "value":"Record_Company"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Please show the record formats of orchestras in ascending order of count.",
        "SQL":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "SQL_parse":{
            "select":{
                "value":"Major_Record_Format"
            },
            "from":"orchestra",
            "groupby":{
                "value":"Major_Record_Format"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the major record formats of orchestras, sorted by their frequency?",
        "SQL":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "SQL_parse":{
            "select":{
                "value":"Major_Record_Format"
            },
            "from":"orchestra",
            "groupby":{
                "value":"Major_Record_Format"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"List the record company shared by the most number of orchestras.",
        "SQL":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Record_Company"
            },
            "from":"orchestra",
            "groupby":{
                "value":"Record_Company"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"What is the record company used by the greatest number of orchestras?",
        "SQL":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Record_Company"
            },
            "from":"orchestra",
            "groupby":{
                "value":"Record_Company"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"orchestra",
        "question":"List the names of orchestras that have no performance.",
        "SQL":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "SQL_parse":{
            "select":{
                "value":"Orchestra"
            },
            "from":"orchestra",
            "where":{
                "nin":[
                    "Orchestra_ID",
                    {
                        "select":{
                            "value":"Orchestra_ID"
                        },
                        "from":"performance"
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the orchestras that do not have any performances?",
        "SQL":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "SQL_parse":{
            "select":{
                "value":"Orchestra"
            },
            "from":"orchestra",
            "where":{
                "nin":[
                    "Orchestra_ID",
                    {
                        "select":{
                            "value":"Orchestra_ID"
                        },
                        "from":"performance"
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "SQL":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"Record_Company"
                    },
                    "from":"orchestra",
                    "where":{
                        "lt":[
                            "Year_of_Founded",
                            2003
                        ]
                    }
                },
                {
                    "select":{
                        "value":"Record_Company"
                    },
                    "from":"orchestra",
                    "where":{
                        "gt":[
                            "Year_of_Founded",
                            2003
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "SQL":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"Record_Company"
                    },
                    "from":"orchestra",
                    "where":{
                        "lt":[
                            "Year_of_Founded",
                            2003
                        ]
                    }
                },
                {
                    "select":{
                        "value":"Record_Company"
                    },
                    "from":"orchestra",
                    "where":{
                        "gt":[
                            "Year_of_Founded",
                            2003
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"orchestra",
        "question":"Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "SQL":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"orchestra",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Major_Record_Format",
                            "CD"
                        ]
                    },
                    {
                        "eq":[
                            "Major_Record_Format",
                            "DVD"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Count the number of orchestras that have CD or DVD as their record format.",
        "SQL":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"orchestra",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Major_Record_Format",
                            "CD"
                        ]
                    },
                    {
                        "eq":[
                            "Major_Record_Format",
                            "DVD"
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"Show the years in which orchestras that have given more than one performance are founded.",
        "SQL":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"Year_of_Founded"
            },
            "from":[
                {
                    "value":"orchestra",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"performance",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Orchestra_ID"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"orchestra",
        "question":"What are years of founding for orchestras that have had more than a single performance?",
        "SQL":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"Year_of_Founded"
            },
            "from":[
                {
                    "value":"orchestra",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"performance",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Orchestra_ID",
                            "T2.Orchestra_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T2.Orchestra_ID"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many high schoolers are there?",
        "SQL":"SELECT count(*) FROM Highschooler",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"Count the number of high schoolers.",
        "SQL":"SELECT count(*) FROM Highschooler",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names and grades of each high schooler.",
        "SQL":"SELECT name ,  grade FROM Highschooler",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"grade"
                }
            ],
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names and grades for each high schooler?",
        "SQL":"SELECT name ,  grade FROM Highschooler",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"grade"
                }
            ],
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"Show all the grades of the high schoolers.",
        "SQL":"SELECT grade FROM Highschooler",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"What is the grade of each high schooler?",
        "SQL":"SELECT grade FROM Highschooler",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler"
        }
    },
    {
        "db_id":"network_1",
        "question":"What grade is Kyle in?",
        "SQL":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Return the grade for the high schooler named Kyle.",
        "SQL":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of all high schoolers in grade 10.",
        "SQL":"SELECT name FROM Highschooler WHERE grade  =  10",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "grade",
                    10
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of all high schoolers in grade 10?",
        "SQL":"SELECT name FROM Highschooler WHERE grade  =  10",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "grade",
                    10
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the ID of the high schooler named Kyle.",
        "SQL":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"ID"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What is Kyle's id?",
        "SQL":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"ID"
            },
            "from":"Highschooler",
            "where":{
                "eq":[
                    "name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many high schoolers are there in grade 9 or 10?",
        "SQL":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Highschooler",
            "where":{
                "or":[
                    {
                        "eq":[
                            "grade",
                            9
                        ]
                    },
                    {
                        "eq":[
                            "grade",
                            10
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Count the number of high schoolers in grades 9 or 10.",
        "SQL":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Highschooler",
            "where":{
                "or":[
                    {
                        "eq":[
                            "grade",
                            9
                        ]
                    },
                    {
                        "eq":[
                            "grade",
                            10
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the number of high schoolers for each grade.",
        "SQL":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "SQL_parse":{
            "select":[
                {
                    "value":"grade"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many high schoolers are in each grade?",
        "SQL":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "SQL_parse":{
            "select":[
                {
                    "value":"grade"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Which grade has the most high schoolers?",
        "SQL":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Return the grade that has the greatest number of high schoolers.",
        "SQL":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Show me all grades that have at least 4 students.",
        "SQL":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    4
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Which grades have 4 or more high schoolers?",
        "SQL":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "SQL_parse":{
            "select":{
                "value":"grade"
            },
            "from":"Highschooler",
            "groupby":{
                "value":"grade"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    4
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the student IDs and numbers of friends corresponding to each.",
        "SQL":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"student_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Friend",
            "groupby":{
                "value":"student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many friends does each student have?",
        "SQL":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"student_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Friend",
            "groupby":{
                "value":"student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of high school students and their corresponding number of friends.",
        "SQL":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of the high schoolers and how many friends does each have?",
        "SQL":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What is the name of the high schooler who has the greatest number of friends?",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Return the name of the high school student with the most friends.",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of high schoolers who have at least 3 friends.",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of high schoolers who have 3 or more friends?",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    3
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of all of the high schooler Kyle's friends.",
        "SQL":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"T3.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Return the names of friends of the high school student Kyle.",
        "SQL":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":"T3.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T1.friend_id",
                            "T3.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many friends does the high school student Kyle have?",
        "SQL":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Count the number of friends Kyle has.",
        "SQL":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show ids of all students who do not have any friends.",
        "SQL":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"id"
                    },
                    "from":"Highschooler"
                },
                {
                    "select":{
                        "value":"student_id"
                    },
                    "from":"Friend"
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the ids of high school students who do not have friends?",
        "SQL":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"id"
                    },
                    "from":"Highschooler"
                },
                {
                    "select":{
                        "value":"student_id"
                    },
                    "from":"Friend"
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"Show names of all high school students who do not have any friends.",
        "SQL":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"Highschooler"
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Friend",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.student_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of students who have no friends?",
        "SQL":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "SQL_parse":{
            "except":[
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"Highschooler"
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Friend",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.student_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the ids of high schoolers who have friends and are also liked by someone else.",
        "SQL":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"student_id"
                    },
                    "from":"Friend"
                },
                {
                    "select":{
                        "value":"liked_id"
                    },
                    "from":"Likes"
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the ids of students who both have friends and are liked?",
        "SQL":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"student_id"
                    },
                    "from":"Friend"
                },
                {
                    "select":{
                        "value":"liked_id"
                    },
                    "from":"Likes"
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"Show name of all students who have some friends and also are liked by someone else.",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Friend",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.student_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Likes",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.liked_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of high schoolers who both have friends and are liked?",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Friend",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.student_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                },
                {
                    "select":{
                        "value":"T2.name"
                    },
                    "from":[
                        {
                            "value":"Likes",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Highschooler",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.liked_id",
                                    "T2.id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"network_1",
        "question":"Count the number of likes for each student id.",
        "SQL":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"student_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Likes",
            "groupby":{
                "value":"student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many likes correspond to each student id?",
        "SQL":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"student_id"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"Likes",
            "groupby":{
                "value":"student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of high schoolers who have likes, and numbers of likes for each.",
        "SQL":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of high schoolers who have likes, and how many likes does each have?",
        "SQL":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.name"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What is the name of the high schooler who has the greatest number of likes?",
        "SQL":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Give the name of the student with the most likes.",
        "SQL":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of students who have at least 2 likes.",
        "SQL":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of students who have 2 or more likes?",
        "SQL":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.grade",
                    5
                ]
            },
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "SQL":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":{
                "value":"T2.name"
            },
            "from":[
                {
                    "value":"Friend",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.grade",
                    5
                ]
            },
            "groupby":{
                "value":"T1.student_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"How many likes does Kyle have?",
        "SQL":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Return the number of likes that the high schooler named Kyle has.",
        "SQL":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":[
                {
                    "value":"Likes",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Highschooler",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.student_id",
                            "T2.id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.name",
                    "Kyle"
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Find the average grade of all students who have some friends.",
        "SQL":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"grade"
                }
            },
            "from":"Highschooler",
            "where":{
                "in":[
                    "id",
                    {
                        "select":{
                            "value":"T1.student_id"
                        },
                        "from":[
                            {
                                "value":"Friend",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"Highschooler",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.student_id",
                                        "T2.id"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What is the average grade of students who have friends?",
        "SQL":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"grade"
                }
            },
            "from":"Highschooler",
            "where":{
                "in":[
                    "id",
                    {
                        "select":{
                            "value":"T1.student_id"
                        },
                        "from":[
                            {
                                "value":"Friend",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"Highschooler",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.student_id",
                                        "T2.id"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"Find the minimum grade of students who have no friends.",
        "SQL":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"grade"
                }
            },
            "from":"Highschooler",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"T1.student_id"
                        },
                        "from":[
                            {
                                "value":"Friend",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"Highschooler",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.student_id",
                                        "T2.id"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"network_1",
        "question":"What is the lowest grade of students who do not have any friends?",
        "SQL":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "SQL_parse":{
            "select":{
                "value":{
                    "min":"grade"
                }
            },
            "from":"Highschooler",
            "where":{
                "nin":[
                    "id",
                    {
                        "select":{
                            "value":"T1.student_id"
                        },
                        "from":[
                            {
                                "value":"Friend",
                                "name":"T1"
                            },
                            {
                                "join":{
                                    "value":"Highschooler",
                                    "name":"T2"
                                },
                                "on":{
                                    "eq":[
                                        "T1.student_id",
                                        "T2.id"
                                    ]
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which states have both owners and professionals living there?",
        "SQL":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"state"
                    },
                    "from":"Owners"
                },
                {
                    "select":{
                        "value":"state"
                    },
                    "from":"Professionals"
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the states where both owners and professionals live.",
        "SQL":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"state"
                    },
                    "from":"Owners"
                },
                {
                    "select":{
                        "value":"state"
                    },
                    "from":"Professionals"
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the average age of the dogs who have gone through any treatments?",
        "SQL":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"Dogs",
            "where":{
                "in":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the average age of the dogs who went through treatments.",
        "SQL":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"Dogs",
            "where":{
                "in":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "SQL":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "SQL_parse":{
            "union":[
                {
                    "select":[
                        {
                            "value":"professional_id"
                        },
                        {
                            "value":"last_name"
                        },
                        {
                            "value":"cell_number"
                        }
                    ],
                    "from":"Professionals",
                    "where":{
                        "eq":[
                            "state",
                            {
                                "literal":"Indiana"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.professional_id"
                        },
                        {
                            "value":"T1.last_name"
                        },
                        {
                            "value":"T1.cell_number"
                        }
                    ],
                    "from":[
                        {
                            "value":"Professionals",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Treatments",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.professional_id",
                                    "T2.professional_id"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"T1.professional_id"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            2
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "SQL":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "SQL_parse":{
            "union":[
                {
                    "select":[
                        {
                            "value":"professional_id"
                        },
                        {
                            "value":"last_name"
                        },
                        {
                            "value":"cell_number"
                        }
                    ],
                    "from":"Professionals",
                    "where":{
                        "eq":[
                            "state",
                            {
                                "literal":"Indiana"
                            }
                        ]
                    }
                },
                {
                    "select":[
                        {
                            "value":"T1.professional_id"
                        },
                        {
                            "value":"T1.last_name"
                        },
                        {
                            "value":"T1.cell_number"
                        }
                    ],
                    "from":[
                        {
                            "value":"Professionals",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Treatments",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.professional_id",
                                    "T2.professional_id"
                                ]
                            }
                        }
                    ],
                    "groupby":{
                        "value":"T1.professional_id"
                    },
                    "having":{
                        "gt":[
                            {
                                "count":"*"
                            },
                            2
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "SQL":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"dogs",
            "where":{
                "nin":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"treatments",
                        "groupby":{
                            "value":"dog_id"
                        },
                        "having":{
                            "gt":[
                                {
                                    "sum":"cost_of_treatment"
                                },
                                1000
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "SQL":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "SQL_parse":{
            "select":{
                "value":"name"
            },
            "from":"dogs",
            "where":{
                "nin":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"treatments",
                        "groupby":{
                            "value":"dog_id"
                        },
                        "having":{
                            "gt":[
                                {
                                    "sum":"cost_of_treatment"
                                },
                                1000
                            ]
                        }
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which first names are used for professionals or owners but are not used as dog names?",
        "SQL":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "SQL_parse":{
            "except":[
                {
                    "union":[
                        {
                            "select":{
                                "value":"first_name"
                            },
                            "from":"Professionals"
                        },
                        {
                            "select":{
                                "value":"first_name"
                            },
                            "from":"Owners"
                        }
                    ]
                },
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"Dogs"
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the first names that are used for professionals or owners but are not used as dog names.",
        "SQL":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "SQL_parse":{
            "except":[
                {
                    "union":[
                        {
                            "select":{
                                "value":"first_name"
                            },
                            "from":"Professionals"
                        },
                        {
                            "select":{
                                "value":"first_name"
                            },
                            "from":"Owners"
                        }
                    ]
                },
                {
                    "select":{
                        "value":"name"
                    },
                    "from":"Dogs"
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "SQL":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "SQL_parse":{
            "except":[
                {
                    "select":[
                        {
                            "value":"professional_id"
                        },
                        {
                            "value":"role_code"
                        },
                        {
                            "value":"email_address"
                        }
                    ],
                    "from":"Professionals"
                },
                {
                    "select":[
                        {
                            "value":"T1.professional_id"
                        },
                        {
                            "value":"T1.role_code"
                        },
                        {
                            "value":"T1.email_address"
                        }
                    ],
                    "from":[
                        {
                            "value":"Professionals",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Treatments",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.professional_id",
                                    "T2.professional_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "SQL":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "SQL_parse":{
            "except":[
                {
                    "select":[
                        {
                            "value":"professional_id"
                        },
                        {
                            "value":"role_code"
                        },
                        {
                            "value":"email_address"
                        }
                    ],
                    "from":"Professionals"
                },
                {
                    "select":[
                        {
                            "value":"T1.professional_id"
                        },
                        {
                            "value":"T1.role_code"
                        },
                        {
                            "value":"T1.email_address"
                        }
                    ],
                    "from":[
                        {
                            "value":"Professionals",
                            "name":"T1"
                        },
                        {
                            "join":{
                                "value":"Treatments",
                                "name":"T2"
                            },
                            "on":{
                                "eq":[
                                    "T1.professional_id",
                                    "T2.professional_id"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which owner owns the most dogs? List the owner id, first name and last name.",
        "SQL":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T2.first_name"
                },
                {
                    "value":"T2.last_name"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Owners",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Return the owner id, first name and last name of the owner who has the most dogs.",
        "SQL":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T2.first_name"
                },
                {
                    "value":"T2.last_name"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Owners",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "SQL":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.professional_id"
                },
                {
                    "value":"T1.role_code"
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.professional_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "SQL":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.professional_id"
                },
                {
                    "value":"T1.role_code"
                },
                {
                    "value":"T1.first_name"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.professional_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the name of the breed with the most dogs?",
        "SQL":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.breed_name"
            },
            "from":[
                {
                    "value":"Breeds",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.breed_code",
                            "T2.breed_code"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.breed_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which breed do the most dogs have? Give me the breed name.",
        "SQL":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.breed_name"
            },
            "from":[
                {
                    "value":"Breeds",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.breed_code",
                            "T2.breed_code"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.breed_name"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "SQL":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.dog_id",
                            "T3.dog_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "SQL":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.dog_id",
                            "T3.dog_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the description of the treatment type that costs the least money in total?",
        "SQL":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.treatment_type_description"
            },
            "from":[
                {
                    "value":"Treatment_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.treatment_type_code",
                            "T2.treatment_type_code"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.treatment_type_code"
            },
            "orderby":{
                "value":{
                    "sum":"cost_of_treatment"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Give me the description of the treatment type whose total cost is the lowest.",
        "SQL":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"T1.treatment_type_description"
            },
            "from":[
                {
                    "value":"Treatment_types",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.treatment_type_code",
                            "T2.treatment_type_code"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.treatment_type_code"
            },
            "orderby":{
                "value":{
                    "sum":"cost_of_treatment"
                },
                "sort":"asc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "SQL":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T1.zip_code"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.dog_id",
                            "T3.dog_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "sum":"T3.cost_of_treatment"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "SQL":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.owner_id"
                },
                {
                    "value":"T1.zip_code"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.dog_id",
                            "T3.dog_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.owner_id"
            },
            "orderby":{
                "value":{
                    "sum":"T3.cost_of_treatment"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "SQL":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.professional_id"
                },
                {
                    "value":"T1.cell_number"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.professional_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "SQL":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.professional_id"
                },
                {
                    "value":"T1.cell_number"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.professional_id"
            },
            "having":{
                "gte":[
                    {
                        "count":"*"
                    },
                    2
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the first name and last name of the professionals who have done treatment with cost below average?",
        "SQL":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    }
                }
            ],
            "where":{
                "lt":[
                    "cost_of_treatment",
                    {
                        "select":{
                            "value":{
                                "avg":"cost_of_treatment"
                            }
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "SQL":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.last_name"
                }
            ],
            "from":[
                {
                    "value":"Professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    }
                }
            ],
            "where":{
                "lt":[
                    "cost_of_treatment",
                    {
                        "select":{
                            "value":{
                                "avg":"cost_of_treatment"
                            }
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the date of each treatment, together with the first name of the professional who operated it.",
        "SQL":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.date_of_treatment"
                },
                {
                    "value":"T2.first_name"
                }
            ],
            "from":[
                {
                    "value":"Treatments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Professionals",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the date and the operating professional's first name of each treatment?",
        "SQL":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.date_of_treatment"
                },
                {
                    "value":"T2.first_name"
                }
            ],
            "from":[
                {
                    "value":"Treatments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Professionals",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the cost of each treatment and the corresponding treatment type description.",
        "SQL":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.cost_of_treatment"
                },
                {
                    "value":"T2.treatment_type_description"
                }
            ],
            "from":[
                {
                    "value":"Treatments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"treatment_types",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.treatment_type_code",
                            "T2.treatment_type_code"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the cost and treatment type description of each treatment?",
        "SQL":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.cost_of_treatment"
                },
                {
                    "value":"T2.treatment_type_description"
                }
            ],
            "from":[
                {
                    "value":"Treatments",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"treatment_types",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.treatment_type_code",
                            "T2.treatment_type_code"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List each owner's first name, last name, and the size of his for her dog.",
        "SQL":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":"T2.size_code"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are each owner's first name, last name, and the size of their dog?",
        "SQL":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T1.last_name"
                },
                {
                    "value":"T2.size_code"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List pairs of the owner's first name and the dogs's name.",
        "SQL":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T2.name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are each owner's first name and their dogs's name?",
        "SQL":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T2.name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the names of the dogs of the rarest breed and the treatment dates of them.",
        "SQL":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.name"
                },
                {
                    "value":"T2.date_of_treatment"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.dog_id",
                            "T2.dog_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.breed_code",
                    {
                        "select":{
                            "value":"breed_code"
                        },
                        "from":"Dogs",
                        "groupby":{
                            "value":"breed_code"
                        },
                        "orderby":{
                            "value":{
                                "count":"*"
                            },
                            "sort":"asc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which dogs are of the rarest breed? Show their names and treatment dates.",
        "SQL":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.name"
                },
                {
                    "value":"T2.date_of_treatment"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.dog_id",
                            "T2.dog_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.breed_code",
                    {
                        "select":{
                            "value":"breed_code"
                        },
                        "from":"Dogs",
                        "groupby":{
                            "value":"breed_code"
                        },
                        "orderby":{
                            "value":{
                                "count":"*"
                            },
                            "sort":"asc"
                        },
                        "limit":1
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "SQL":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T2.name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.state",
                    {
                        "literal":"Virginia"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the first names of owners living in Virginia and the names of dogs they own.",
        "SQL":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T2.name"
                }
            ],
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.state",
                    {
                        "literal":"Virginia"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "SQL":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.date_arrived"
                },
                {
                    "value":"T1.date_departed"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.dog_id",
                            "T2.dog_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the arriving date and the departing date of the dogs that received a treatment.",
        "SQL":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.date_arrived"
                },
                {
                    "value":"T1.date_departed"
                }
            ],
            "from":[
                {
                    "value":"Dogs",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.dog_id",
                            "T2.dog_id"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the last name of the owner owning the youngest dog.",
        "SQL":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":"T1.last_name"
            },
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.age",
                    {
                        "select":{
                            "value":{
                                "max":"age"
                            }
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Who owns the youngest dog? Give me his or her last name.",
        "SQL":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":"T1.last_name"
            },
            "from":[
                {
                    "value":"Owners",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Dogs",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.owner_id",
                            "T2.owner_id"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T2.age",
                    {
                        "select":{
                            "value":{
                                "max":"age"
                            }
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "SQL":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "SQL_parse":{
            "select":{
                "value":"email_address"
            },
            "from":"Professionals",
            "where":{
                "or":[
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"Hawaii"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"Wisconsin"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "SQL":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "SQL_parse":{
            "select":{
                "value":"email_address"
            },
            "from":"Professionals",
            "where":{
                "or":[
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"Hawaii"
                            }
                        ]
                    },
                    {
                        "eq":[
                            "state",
                            {
                                "literal":"Wisconsin"
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the arriving date and the departing date of all the dogs?",
        "SQL":"SELECT date_arrived ,  date_departed FROM Dogs",
        "SQL_parse":{
            "select":[
                {
                    "value":"date_arrived"
                },
                {
                    "value":"date_departed"
                }
            ],
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the arrival date and the departure date for all the dogs.",
        "SQL":"SELECT date_arrived ,  date_departed FROM Dogs",
        "SQL_parse":{
            "select":[
                {
                    "value":"date_arrived"
                },
                {
                    "value":"date_departed"
                }
            ],
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many dogs went through any treatments?",
        "SQL":"SELECT count(DISTINCT dog_id) FROM Treatments",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"dog_id"
                }
            },
            "from":"Treatments"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Count the number of dogs that went through a treatment.",
        "SQL":"SELECT count(DISTINCT dog_id) FROM Treatments",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"dog_id"
                }
            },
            "from":"Treatments"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many professionals have performed any treatment to dogs?",
        "SQL":"SELECT count(DISTINCT professional_id) FROM Treatments",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"professional_id"
                }
            },
            "from":"Treatments"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the number of professionals who have ever treated dogs.",
        "SQL":"SELECT count(DISTINCT professional_id) FROM Treatments",
        "SQL_parse":{
            "select":{
                "value":{
                    "distinct":true,
                    "count":"professional_id"
                }
            },
            "from":"Treatments"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "SQL":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"role_code"
                },
                {
                    "value":"street"
                },
                {
                    "value":"city"
                },
                {
                    "value":"state"
                }
            ],
            "from":"professionals",
            "where":{
                "like":[
                    "city",
                    {
                        "literal":"%West%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "SQL":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"role_code"
                },
                {
                    "value":"street"
                },
                {
                    "value":"city"
                },
                {
                    "value":"state"
                }
            ],
            "from":"professionals",
            "where":{
                "like":[
                    "city",
                    {
                        "literal":"%West%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "SQL":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                },
                {
                    "value":"email_address"
                }
            ],
            "from":"Owners",
            "where":{
                "like":[
                    "state",
                    {
                        "literal":"%North%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "SQL":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "SQL_parse":{
            "select":[
                {
                    "value":"first_name"
                },
                {
                    "value":"last_name"
                },
                {
                    "value":"email_address"
                }
            ],
            "from":"Owners",
            "where":{
                "like":[
                    "state",
                    {
                        "literal":"%North%"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many dogs have an age below the average?",
        "SQL":"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Dogs",
            "where":{
                "lt":[
                    "age",
                    {
                        "select":{
                            "value":{
                                "avg":"age"
                            }
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Count the number of dogs of an age below the average.",
        "SQL":"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Dogs",
            "where":{
                "lt":[
                    "age",
                    {
                        "select":{
                            "value":{
                                "avg":"age"
                            }
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How much does the most recent treatment cost?",
        "SQL":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"cost_of_treatment"
            },
            "from":"Treatments",
            "orderby":{
                "value":"date_of_treatment",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Show me the cost of the most recently performed treatment.",
        "SQL":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"cost_of_treatment"
            },
            "from":"Treatments",
            "orderby":{
                "value":"date_of_treatment",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many dogs have not gone through any treatment?",
        "SQL":"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Dogs",
            "where":{
                "nin":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Tell me the number of dogs that have not received any treatment .",
        "SQL":"select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"dogs",
            "where":{
                "nin":[
                    "dog_id",
                    {
                        "select":{
                            "value":"dog_id"
                        },
                        "from":"treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many owners temporarily do not have any dogs?",
        "SQL":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Owners",
            "where":{
                "nin":[
                    "owner_id",
                    {
                        "select":{
                            "value":"owner_id"
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the number of owners who do not own any dogs at this moment.",
        "SQL":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Owners",
            "where":{
                "nin":[
                    "owner_id",
                    {
                        "select":{
                            "value":"owner_id"
                        },
                        "from":"Dogs"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How many professionals did not operate any treatment on dogs?",
        "SQL":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Professionals",
            "where":{
                "nin":[
                    "professional_id",
                    {
                        "select":{
                            "value":"professional_id"
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the number of professionals who have not treated any dogs.",
        "SQL":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Professionals",
            "where":{
                "nin":[
                    "professional_id",
                    {
                        "select":{
                            "value":"professional_id"
                        },
                        "from":"Treatments"
                    }
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "SQL":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"age"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"Dogs",
            "where":{
                "eq":[
                    "abandoned_yn",
                    1
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "SQL":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "SQL_parse":{
            "select":[
                {
                    "value":"name"
                },
                {
                    "value":"age"
                },
                {
                    "value":"weight"
                }
            ],
            "from":"Dogs",
            "where":{
                "eq":[
                    "abandoned_yn",
                    1
                ]
            }
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the average age of all the dogs?",
        "SQL":"SELECT avg(age) FROM Dogs",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Compute the average age of all the dogs.",
        "SQL":"SELECT avg(age) FROM Dogs",
        "SQL_parse":{
            "select":{
                "value":{
                    "avg":"age"
                }
            },
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the age of the oldest dog?",
        "SQL":"SELECT max(age) FROM Dogs",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"age"
                }
            },
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Tell me the age of the oldest dog.",
        "SQL":"SELECT max(age) FROM Dogs",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"age"
                }
            },
            "from":"Dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How much does each charge type costs? List both charge type and amount.",
        "SQL":"SELECT charge_type ,  charge_amount FROM Charges",
        "SQL_parse":{
            "select":[
                {
                    "value":"charge_type"
                },
                {
                    "value":"charge_amount"
                }
            ],
            "from":"Charges"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List each charge type and its amount.",
        "SQL":"SELECT charge_type ,  charge_amount FROM Charges",
        "SQL_parse":{
            "select":[
                {
                    "value":"charge_type"
                },
                {
                    "value":"charge_amount"
                }
            ],
            "from":"Charges"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"How much does the most expensive charge type costs?",
        "SQL":"SELECT max(charge_amount) FROM Charges",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"charge_amount"
                }
            },
            "from":"Charges"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What is the charge amount of the most expensive charge type?",
        "SQL":"SELECT max(charge_amount) FROM Charges",
        "SQL_parse":{
            "select":{
                "value":{
                    "max":"charge_amount"
                }
            },
            "from":"Charges"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the email, cell phone and home phone of all the professionals.",
        "SQL":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "SQL_parse":{
            "select":[
                {
                    "value":"email_address"
                },
                {
                    "value":"cell_number"
                },
                {
                    "value":"home_phone"
                }
            ],
            "from":"professionals"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are the email, cell phone and home phone of each professional?",
        "SQL":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "SQL_parse":{
            "select":[
                {
                    "value":"email_address"
                },
                {
                    "value":"cell_number"
                },
                {
                    "value":"home_phone"
                }
            ],
            "from":"professionals"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are all the possible breed type and size type combinations?",
        "SQL":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"breed_code"
                },
                {
                    "value":"size_code"
                }
            ],
            "from":"dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"Find the distinct breed type and size type combinations for dogs.",
        "SQL":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"breed_code"
                },
                {
                    "value":"size_code"
                }
            ],
            "from":"dogs"
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"List the first name of all the professionals along with the description of the treatment they have done.",
        "SQL":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T3.treatment_type_description"
                }
            ],
            "from":[
                {
                    "value":"professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatment_types",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.treatment_type_code",
                            "T3.treatment_type_code"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"dog_kennels",
        "question":"What are each professional's first name and description of the treatment they have performed?",
        "SQL":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "SQL_parse":{
            "select_distinct":[
                {
                    "value":"T1.first_name"
                },
                {
                    "value":"T3.treatment_type_description"
                }
            ],
            "from":[
                {
                    "value":"professionals",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Treatments",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.professional_id",
                            "T2.professional_id"
                        ]
                    }
                },
                {
                    "join":{
                        "value":"Treatment_types",
                        "name":"T3"
                    },
                    "on":{
                        "eq":[
                            "T2.treatment_type_code",
                            "T3.treatment_type_code"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"singer",
        "question":"How many singers are there?",
        "SQL":"SELECT count(*) FROM singer",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"singer"
        }
    },
    {
        "db_id":"singer",
        "question":"What is the count of singers?",
        "SQL":"SELECT count(*) FROM singer",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"singer"
        }
    },
    {
        "db_id":"singer",
        "question":"List the name of singers in ascending order of net worth.",
        "SQL":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "orderby":{
                "value":"Net_Worth_Millions",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What are the names of singers ordered by ascending net worth?",
        "SQL":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "orderby":{
                "value":"Net_Worth_Millions",
                "sort":"asc"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What are the birth year and citizenship of singers?",
        "SQL":"SELECT Birth_Year ,  Citizenship FROM singer",
        "SQL_parse":{
            "select":[
                {
                    "value":"Birth_Year"
                },
                {
                    "value":"Citizenship"
                }
            ],
            "from":"singer"
        }
    },
    {
        "db_id":"singer",
        "question":"What are the birth years and citizenships of the singers?",
        "SQL":"SELECT Birth_Year ,  Citizenship FROM singer",
        "SQL_parse":{
            "select":[
                {
                    "value":"Birth_Year"
                },
                {
                    "value":"Citizenship"
                }
            ],
            "from":"singer"
        }
    },
    {
        "db_id":"singer",
        "question":"List the name of singers whose citizenship is not \"France\".",
        "SQL":"SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "neq":[
                    "Citizenship",
                    "France"
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What are the names of the singers who are not French citizens?",
        "SQL":"SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "neq":[
                    "Citizenship",
                    "France"
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Show the name of singers whose birth year is either 1948 or 1949?",
        "SQL":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Birth_Year",
                            1948
                        ]
                    },
                    {
                        "eq":[
                            "Birth_Year",
                            1949
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What are the names of the singers whose birth years are either 1948 or 1949?",
        "SQL":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "or":[
                    {
                        "eq":[
                            "Birth_Year",
                            1948
                        ]
                    },
                    {
                        "eq":[
                            "Birth_Year",
                            1949
                        ]
                    }
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What is the name of the singer with the largest net worth?",
        "SQL":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "orderby":{
                "value":"Net_Worth_Millions",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"singer",
        "question":"What is the name of the singer who is worth the most?",
        "SQL":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "orderby":{
                "value":"Net_Worth_Millions",
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"singer",
        "question":"Show different citizenship of singers and the number of singers of each citizenship.",
        "SQL":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "SQL_parse":{
            "select":[
                {
                    "value":"Citizenship"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"Citizenship"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"For each citizenship, how many singers are from that country?",
        "SQL":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "SQL_parse":{
            "select":[
                {
                    "value":"Citizenship"
                },
                {
                    "value":{
                        "count":"*"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"Citizenship"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Please show the most common citizenship of singers.",
        "SQL":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "SQL_parse":{
            "select":{
                "value":"Citizenship"
            },
            "from":"singer",
            "groupby":{
                "value":"Citizenship"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"singer",
        "question":"What is the most common singer citizenship ?",
        "SQL":"select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "SQL_parse":{
            "select":{
                "value":"citizenship"
            },
            "from":"singer",
            "groupby":{
                "value":"citizenship"
            },
            "orderby":{
                "value":{
                    "count":"*"
                },
                "sort":"desc"
            },
            "limit":1
        }
    },
    {
        "db_id":"singer",
        "question":"Show different citizenships and the maximum net worth of singers of each citizenship.",
        "SQL":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "SQL_parse":{
            "select":[
                {
                    "value":"Citizenship"
                },
                {
                    "value":{
                        "max":"Net_Worth_Millions"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"Citizenship"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"For each citizenship, what is the maximum net worth?",
        "SQL":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "SQL_parse":{
            "select":[
                {
                    "value":"Citizenship"
                },
                {
                    "value":{
                        "max":"Net_Worth_Millions"
                    }
                }
            ],
            "from":"singer",
            "groupby":{
                "value":"Citizenship"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Show titles of songs and names of singers.",
        "SQL":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Title"
                },
                {
                    "value":"T1.Name"
                }
            ],
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"singer",
        "question":"What are the song titles and singer names?",
        "SQL":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "SQL_parse":{
            "select":[
                {
                    "value":"T2.Title"
                },
                {
                    "value":"T1.Name"
                }
            ],
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"singer",
        "question":"Show distinct names of singers that have songs with sales more than 300000.",
        "SQL":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.Sales",
                    300000
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"what are the different names of the singers that have sales more than 300000?",
        "SQL":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "SQL_parse":{
            "select_distinct":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "where":{
                "gt":[
                    "T2.Sales",
                    300000
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Show the names of singers that have more than one song.",
        "SQL":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What are the names of the singers that have more than one songs?",
        "SQL":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "SQL_parse":{
            "select":{
                "value":"T1.Name"
            },
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            },
            "having":{
                "gt":[
                    {
                        "count":"*"
                    },
                    1
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Show the names of singers and the total sales of their songs.",
        "SQL":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":{
                        "sum":"T2.Sales"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"For each singer name, what is the total sales for their songs?",
        "SQL":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "SQL_parse":{
            "select":[
                {
                    "value":"T1.Name"
                },
                {
                    "value":{
                        "sum":"T2.Sales"
                    }
                }
            ],
            "from":[
                {
                    "value":"singer",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"song",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.Singer_ID",
                            "T2.Singer_ID"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.Name"
            }
        }
    },
    {
        "db_id":"singer",
        "question":"List the name of singers that do not have any song.",
        "SQL":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "nin":[
                    "Singer_ID",
                    {
                        "select":{
                            "value":"Singer_ID"
                        },
                        "from":"song"
                    }
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"What is the sname of every sing that does not have any song?",
        "SQL":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SQL_parse":{
            "select":{
                "value":"Name"
            },
            "from":"singer",
            "where":{
                "nin":[
                    "Singer_ID",
                    {
                        "select":{
                            "value":"Singer_ID"
                        },
                        "from":"song"
                    }
                ]
            }
        }
    },
    {
        "db_id":"singer",
        "question":"Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "SQL":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"Citizenship"
                    },
                    "from":"singer",
                    "where":{
                        "lt":[
                            "Birth_Year",
                            1945
                        ]
                    }
                },
                {
                    "select":{
                        "value":"Citizenship"
                    },
                    "from":"singer",
                    "where":{
                        "gt":[
                            "Birth_Year",
                            1955
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"singer",
        "question":"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "SQL":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "SQL_parse":{
            "intersect":[
                {
                    "select":{
                        "value":"Citizenship"
                    },
                    "from":"singer",
                    "where":{
                        "lt":[
                            "Birth_Year",
                            1945
                        ]
                    }
                },
                {
                    "select":{
                        "value":"Citizenship"
                    },
                    "from":"singer",
                    "where":{
                        "gt":[
                            "Birth_Year",
                            1955
                        ]
                    }
                }
            ]
        }
    },
    {
        "db_id":"real_estate_properties",
        "question":"How many available features are there in total?",
        "SQL":"SELECT count(*) FROM Other_Available_Features",
        "SQL_parse":{
            "select":{
                "value":{
                    "count":"*"
                }
            },
            "from":"Other_Available_Features"
        }
    },
    {
        "db_id":"real_estate_properties",
        "question":"What is the feature type name of feature AirCon?",
        "SQL":"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "SQL_parse":{
            "select":{
                "value":"T2.feature_type_name"
            },
            "from":[
                {
                    "value":"Other_Available_Features",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Ref_Feature_Types",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.feature_type_code",
                            "T2.feature_type_code"
                        ]
                    }
                }
            ],
            "where":{
                "eq":[
                    "T1.feature_name",
                    "AirCon"
                ]
            }
        }
    },
    {
        "db_id":"real_estate_properties",
        "question":"Show the property type descriptions of properties belonging to that code.",
        "SQL":"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "SQL_parse":{
            "select":{
                "value":"T2.property_type_description"
            },
            "from":[
                {
                    "value":"Properties",
                    "name":"T1"
                },
                {
                    "join":{
                        "value":"Ref_Property_Types",
                        "name":"T2"
                    },
                    "on":{
                        "eq":[
                            "T1.property_type_code",
                            "T2.property_type_code"
                        ]
                    }
                }
            ],
            "groupby":{
                "value":"T1.property_type_code"
            }
        }
    },
    {
        "db_id":"real_estate_properties",
        "question":"What are the names of properties that are either houses or apartments with more than 1 room?",
        "SQL":"SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "SQL_parse":{
            "union":[
                {
                    "select":{
                        "value":"property_name"
                    },
                    "from":"Properties",
                    "where":{
                        "eq":[
                            "property_type_code",
                            "House"
                        ]
                    }
                },
                {
                    "select":{
                        "value":"property_name"
                    },
                    "from":"Properties",
                    "where":{
                        "and":[
                            {
                                "eq":[
                                    "property_type_code",
                                    "Apartment"
                                ]
                            },
                            {
                                "gt":[
                                    "room_count",
                                    1
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    }
]